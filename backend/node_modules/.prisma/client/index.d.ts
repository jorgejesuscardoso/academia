
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Lembrete
 * 
 */
export type Lembrete = $Result.DefaultSelection<Prisma.$LembretePayload>
/**
 * Model Evento
 * 
 */
export type Evento = $Result.DefaultSelection<Prisma.$EventoPayload>
/**
 * Model Publicacao
 * 
 */
export type Publicacao = $Result.DefaultSelection<Prisma.$PublicacaoPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Instrutor
 * 
 */
export type Instrutor = $Result.DefaultSelection<Prisma.$InstrutorPayload>
/**
 * Model Plano
 * 
 */
export type Plano = $Result.DefaultSelection<Prisma.$PlanoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.lembrete`: Exposes CRUD operations for the **Lembrete** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lembretes
    * const lembretes = await prisma.lembrete.findMany()
    * ```
    */
  get lembrete(): Prisma.LembreteDelegate<ExtArgs>;

  /**
   * `prisma.evento`: Exposes CRUD operations for the **Evento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Eventos
    * const eventos = await prisma.evento.findMany()
    * ```
    */
  get evento(): Prisma.EventoDelegate<ExtArgs>;

  /**
   * `prisma.publicacao`: Exposes CRUD operations for the **Publicacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Publicacaos
    * const publicacaos = await prisma.publicacao.findMany()
    * ```
    */
  get publicacao(): Prisma.PublicacaoDelegate<ExtArgs>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs>;

  /**
   * `prisma.instrutor`: Exposes CRUD operations for the **Instrutor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Instrutors
    * const instrutors = await prisma.instrutor.findMany()
    * ```
    */
  get instrutor(): Prisma.InstrutorDelegate<ExtArgs>;

  /**
   * `prisma.plano`: Exposes CRUD operations for the **Plano** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Planos
    * const planos = await prisma.plano.findMany()
    * ```
    */
  get plano(): Prisma.PlanoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.1
   * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Lembrete: 'Lembrete',
    Evento: 'Evento',
    Publicacao: 'Publicacao',
    Cliente: 'Cliente',
    Instrutor: 'Instrutor',
    Plano: 'Plano'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'lembrete' | 'evento' | 'publicacao' | 'cliente' | 'instrutor' | 'plano'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Lembrete: {
        payload: Prisma.$LembretePayload<ExtArgs>
        fields: Prisma.LembreteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LembreteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LembretePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LembreteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LembretePayload>
          }
          findFirst: {
            args: Prisma.LembreteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LembretePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LembreteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LembretePayload>
          }
          findMany: {
            args: Prisma.LembreteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LembretePayload>[]
          }
          create: {
            args: Prisma.LembreteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LembretePayload>
          }
          createMany: {
            args: Prisma.LembreteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LembreteCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LembretePayload>[]
          }
          delete: {
            args: Prisma.LembreteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LembretePayload>
          }
          update: {
            args: Prisma.LembreteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LembretePayload>
          }
          deleteMany: {
            args: Prisma.LembreteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LembreteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LembreteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LembretePayload>
          }
          aggregate: {
            args: Prisma.LembreteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLembrete>
          }
          groupBy: {
            args: Prisma.LembreteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LembreteGroupByOutputType>[]
          }
          count: {
            args: Prisma.LembreteCountArgs<ExtArgs>,
            result: $Utils.Optional<LembreteCountAggregateOutputType> | number
          }
        }
      }
      Evento: {
        payload: Prisma.$EventoPayload<ExtArgs>
        fields: Prisma.EventoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          findFirst: {
            args: Prisma.EventoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          findMany: {
            args: Prisma.EventoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>[]
          }
          create: {
            args: Prisma.EventoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          createMany: {
            args: Prisma.EventoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>[]
          }
          delete: {
            args: Prisma.EventoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          update: {
            args: Prisma.EventoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          deleteMany: {
            args: Prisma.EventoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          aggregate: {
            args: Prisma.EventoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEvento>
          }
          groupBy: {
            args: Prisma.EventoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventoCountArgs<ExtArgs>,
            result: $Utils.Optional<EventoCountAggregateOutputType> | number
          }
        }
      }
      Publicacao: {
        payload: Prisma.$PublicacaoPayload<ExtArgs>
        fields: Prisma.PublicacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PublicacaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PublicacaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          findFirst: {
            args: Prisma.PublicacaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PublicacaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          findMany: {
            args: Prisma.PublicacaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>[]
          }
          create: {
            args: Prisma.PublicacaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          createMany: {
            args: Prisma.PublicacaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PublicacaoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>[]
          }
          delete: {
            args: Prisma.PublicacaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          update: {
            args: Prisma.PublicacaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          deleteMany: {
            args: Prisma.PublicacaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PublicacaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PublicacaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          aggregate: {
            args: Prisma.PublicacaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePublicacao>
          }
          groupBy: {
            args: Prisma.PublicacaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PublicacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PublicacaoCountArgs<ExtArgs>,
            result: $Utils.Optional<PublicacaoCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClienteCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>,
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Instrutor: {
        payload: Prisma.$InstrutorPayload<ExtArgs>
        fields: Prisma.InstrutorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstrutorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrutorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstrutorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrutorPayload>
          }
          findFirst: {
            args: Prisma.InstrutorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrutorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstrutorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrutorPayload>
          }
          findMany: {
            args: Prisma.InstrutorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrutorPayload>[]
          }
          create: {
            args: Prisma.InstrutorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrutorPayload>
          }
          createMany: {
            args: Prisma.InstrutorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstrutorCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrutorPayload>[]
          }
          delete: {
            args: Prisma.InstrutorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrutorPayload>
          }
          update: {
            args: Prisma.InstrutorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrutorPayload>
          }
          deleteMany: {
            args: Prisma.InstrutorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InstrutorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InstrutorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstrutorPayload>
          }
          aggregate: {
            args: Prisma.InstrutorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInstrutor>
          }
          groupBy: {
            args: Prisma.InstrutorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InstrutorGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstrutorCountArgs<ExtArgs>,
            result: $Utils.Optional<InstrutorCountAggregateOutputType> | number
          }
        }
      }
      Plano: {
        payload: Prisma.$PlanoPayload<ExtArgs>
        fields: Prisma.PlanoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          findFirst: {
            args: Prisma.PlanoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          findMany: {
            args: Prisma.PlanoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>[]
          }
          create: {
            args: Prisma.PlanoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          createMany: {
            args: Prisma.PlanoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>[]
          }
          delete: {
            args: Prisma.PlanoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          update: {
            args: Prisma.PlanoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          deleteMany: {
            args: Prisma.PlanoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlanoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlanoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          aggregate: {
            args: Prisma.PlanoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlano>
          }
          groupBy: {
            args: Prisma.PlanoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlanoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanoCountArgs<ExtArgs>,
            result: $Utils.Optional<PlanoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    lembretes: number
    eventos: number
    publicacoes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lembretes?: boolean | UserCountOutputTypeCountLembretesArgs
    eventos?: boolean | UserCountOutputTypeCountEventosArgs
    publicacoes?: boolean | UserCountOutputTypeCountPublicacoesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLembretesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LembreteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPublicacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicacaoWhereInput
  }


  /**
   * Count Type PlanoCountOutputType
   */

  export type PlanoCountOutputType = {
    clientes: number
  }

  export type PlanoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | PlanoCountOutputTypeCountClientesArgs
  }

  // Custom InputTypes
  /**
   * PlanoCountOutputType without action
   */
  export type PlanoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanoCountOutputType
     */
    select?: PlanoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlanoCountOutputType without action
   */
  export type PlanoCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    username: string | null
    senha: string | null
    turno: string | null
    role: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    username: string | null
    senha: string | null
    turno: string | null
    role: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    username: number
    senha: number
    turno: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    username?: true
    senha?: true
    turno?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    username?: true
    senha?: true
    turno?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    username?: true
    senha?: true
    turno?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    nome: string
    email: string
    telefone: string | null
    username: string | null
    senha: string
    turno: string
    role: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    username?: boolean
    senha?: boolean
    turno?: boolean
    role?: boolean
    lembretes?: boolean | User$lembretesArgs<ExtArgs>
    eventos?: boolean | User$eventosArgs<ExtArgs>
    publicacoes?: boolean | User$publicacoesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    username?: boolean
    senha?: boolean
    turno?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    username?: boolean
    senha?: boolean
    turno?: boolean
    role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lembretes?: boolean | User$lembretesArgs<ExtArgs>
    eventos?: boolean | User$eventosArgs<ExtArgs>
    publicacoes?: boolean | User$publicacoesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      lembretes: Prisma.$LembretePayload<ExtArgs>[]
      eventos: Prisma.$EventoPayload<ExtArgs>[]
      publicacoes: Prisma.$PublicacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      telefone: string | null
      username: string | null
      senha: string
      turno: string
      role: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    lembretes<T extends User$lembretesArgs<ExtArgs> = {}>(args?: Subset<T, User$lembretesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LembretePayload<ExtArgs>, T, 'findMany'> | Null>;

    eventos<T extends User$eventosArgs<ExtArgs> = {}>(args?: Subset<T, User$eventosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findMany'> | Null>;

    publicacoes<T extends User$publicacoesArgs<ExtArgs> = {}>(args?: Subset<T, User$publicacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly nome: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly telefone: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly senha: FieldRef<"User", 'String'>
    readonly turno: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.lembretes
   */
  export type User$lembretesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteInclude<ExtArgs> | null
    where?: LembreteWhereInput
    orderBy?: LembreteOrderByWithRelationInput | LembreteOrderByWithRelationInput[]
    cursor?: LembreteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LembreteScalarFieldEnum | LembreteScalarFieldEnum[]
  }

  /**
   * User.eventos
   */
  export type User$eventosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    where?: EventoWhereInput
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    cursor?: EventoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * User.publicacoes
   */
  export type User$publicacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    where?: PublicacaoWhereInput
    orderBy?: PublicacaoOrderByWithRelationInput | PublicacaoOrderByWithRelationInput[]
    cursor?: PublicacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublicacaoScalarFieldEnum | PublicacaoScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Lembrete
   */

  export type AggregateLembrete = {
    _count: LembreteCountAggregateOutputType | null
    _avg: LembreteAvgAggregateOutputType | null
    _sum: LembreteSumAggregateOutputType | null
    _min: LembreteMinAggregateOutputType | null
    _max: LembreteMaxAggregateOutputType | null
  }

  export type LembreteAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type LembreteSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type LembreteMinAggregateOutputType = {
    id: number | null
    tipo: string | null
    titulo: string | null
    descricao: string | null
    data: Date | null
    concluido: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    usuarioId: number | null
  }

  export type LembreteMaxAggregateOutputType = {
    id: number | null
    tipo: string | null
    titulo: string | null
    descricao: string | null
    data: Date | null
    concluido: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    usuarioId: number | null
  }

  export type LembreteCountAggregateOutputType = {
    id: number
    tipo: number
    titulo: number
    descricao: number
    data: number
    concluido: number
    createdAt: number
    updatedAt: number
    usuarioId: number
    _all: number
  }


  export type LembreteAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type LembreteSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type LembreteMinAggregateInputType = {
    id?: true
    tipo?: true
    titulo?: true
    descricao?: true
    data?: true
    concluido?: true
    createdAt?: true
    updatedAt?: true
    usuarioId?: true
  }

  export type LembreteMaxAggregateInputType = {
    id?: true
    tipo?: true
    titulo?: true
    descricao?: true
    data?: true
    concluido?: true
    createdAt?: true
    updatedAt?: true
    usuarioId?: true
  }

  export type LembreteCountAggregateInputType = {
    id?: true
    tipo?: true
    titulo?: true
    descricao?: true
    data?: true
    concluido?: true
    createdAt?: true
    updatedAt?: true
    usuarioId?: true
    _all?: true
  }

  export type LembreteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lembrete to aggregate.
     */
    where?: LembreteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lembretes to fetch.
     */
    orderBy?: LembreteOrderByWithRelationInput | LembreteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LembreteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lembretes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lembretes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lembretes
    **/
    _count?: true | LembreteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LembreteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LembreteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LembreteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LembreteMaxAggregateInputType
  }

  export type GetLembreteAggregateType<T extends LembreteAggregateArgs> = {
        [P in keyof T & keyof AggregateLembrete]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLembrete[P]>
      : GetScalarType<T[P], AggregateLembrete[P]>
  }




  export type LembreteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LembreteWhereInput
    orderBy?: LembreteOrderByWithAggregationInput | LembreteOrderByWithAggregationInput[]
    by: LembreteScalarFieldEnum[] | LembreteScalarFieldEnum
    having?: LembreteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LembreteCountAggregateInputType | true
    _avg?: LembreteAvgAggregateInputType
    _sum?: LembreteSumAggregateInputType
    _min?: LembreteMinAggregateInputType
    _max?: LembreteMaxAggregateInputType
  }

  export type LembreteGroupByOutputType = {
    id: number
    tipo: string
    titulo: string
    descricao: string
    data: Date
    concluido: boolean
    createdAt: Date
    updatedAt: Date
    usuarioId: number
    _count: LembreteCountAggregateOutputType | null
    _avg: LembreteAvgAggregateOutputType | null
    _sum: LembreteSumAggregateOutputType | null
    _min: LembreteMinAggregateOutputType | null
    _max: LembreteMaxAggregateOutputType | null
  }

  type GetLembreteGroupByPayload<T extends LembreteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LembreteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LembreteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LembreteGroupByOutputType[P]>
            : GetScalarType<T[P], LembreteGroupByOutputType[P]>
        }
      >
    >


  export type LembreteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    titulo?: boolean
    descricao?: boolean
    data?: boolean
    concluido?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuarioId?: boolean
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lembrete"]>

  export type LembreteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    titulo?: boolean
    descricao?: boolean
    data?: boolean
    concluido?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuarioId?: boolean
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lembrete"]>

  export type LembreteSelectScalar = {
    id?: boolean
    tipo?: boolean
    titulo?: boolean
    descricao?: boolean
    data?: boolean
    concluido?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuarioId?: boolean
  }

  export type LembreteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LembreteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LembretePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lembrete"
    objects: {
      usuario: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo: string
      titulo: string
      descricao: string
      data: Date
      concluido: boolean
      createdAt: Date
      updatedAt: Date
      usuarioId: number
    }, ExtArgs["result"]["lembrete"]>
    composites: {}
  }

  type LembreteGetPayload<S extends boolean | null | undefined | LembreteDefaultArgs> = $Result.GetResult<Prisma.$LembretePayload, S>

  type LembreteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LembreteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LembreteCountAggregateInputType | true
    }

  export interface LembreteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lembrete'], meta: { name: 'Lembrete' } }
    /**
     * Find zero or one Lembrete that matches the filter.
     * @param {LembreteFindUniqueArgs} args - Arguments to find a Lembrete
     * @example
     * // Get one Lembrete
     * const lembrete = await prisma.lembrete.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LembreteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LembreteFindUniqueArgs<ExtArgs>>
    ): Prisma__LembreteClient<$Result.GetResult<Prisma.$LembretePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Lembrete that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LembreteFindUniqueOrThrowArgs} args - Arguments to find a Lembrete
     * @example
     * // Get one Lembrete
     * const lembrete = await prisma.lembrete.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LembreteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LembreteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LembreteClient<$Result.GetResult<Prisma.$LembretePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Lembrete that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LembreteFindFirstArgs} args - Arguments to find a Lembrete
     * @example
     * // Get one Lembrete
     * const lembrete = await prisma.lembrete.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LembreteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LembreteFindFirstArgs<ExtArgs>>
    ): Prisma__LembreteClient<$Result.GetResult<Prisma.$LembretePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Lembrete that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LembreteFindFirstOrThrowArgs} args - Arguments to find a Lembrete
     * @example
     * // Get one Lembrete
     * const lembrete = await prisma.lembrete.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LembreteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LembreteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LembreteClient<$Result.GetResult<Prisma.$LembretePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Lembretes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LembreteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lembretes
     * const lembretes = await prisma.lembrete.findMany()
     * 
     * // Get first 10 Lembretes
     * const lembretes = await prisma.lembrete.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lembreteWithIdOnly = await prisma.lembrete.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LembreteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LembreteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LembretePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Lembrete.
     * @param {LembreteCreateArgs} args - Arguments to create a Lembrete.
     * @example
     * // Create one Lembrete
     * const Lembrete = await prisma.lembrete.create({
     *   data: {
     *     // ... data to create a Lembrete
     *   }
     * })
     * 
    **/
    create<T extends LembreteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LembreteCreateArgs<ExtArgs>>
    ): Prisma__LembreteClient<$Result.GetResult<Prisma.$LembretePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Lembretes.
     * @param {LembreteCreateManyArgs} args - Arguments to create many Lembretes.
     * @example
     * // Create many Lembretes
     * const lembrete = await prisma.lembrete.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends LembreteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LembreteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lembretes and returns the data saved in the database.
     * @param {LembreteCreateManyAndReturnArgs} args - Arguments to create many Lembretes.
     * @example
     * // Create many Lembretes
     * const lembrete = await prisma.lembrete.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lembretes and only return the `id`
     * const lembreteWithIdOnly = await prisma.lembrete.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends LembreteCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, LembreteCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LembretePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Lembrete.
     * @param {LembreteDeleteArgs} args - Arguments to delete one Lembrete.
     * @example
     * // Delete one Lembrete
     * const Lembrete = await prisma.lembrete.delete({
     *   where: {
     *     // ... filter to delete one Lembrete
     *   }
     * })
     * 
    **/
    delete<T extends LembreteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LembreteDeleteArgs<ExtArgs>>
    ): Prisma__LembreteClient<$Result.GetResult<Prisma.$LembretePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Lembrete.
     * @param {LembreteUpdateArgs} args - Arguments to update one Lembrete.
     * @example
     * // Update one Lembrete
     * const lembrete = await prisma.lembrete.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LembreteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LembreteUpdateArgs<ExtArgs>>
    ): Prisma__LembreteClient<$Result.GetResult<Prisma.$LembretePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Lembretes.
     * @param {LembreteDeleteManyArgs} args - Arguments to filter Lembretes to delete.
     * @example
     * // Delete a few Lembretes
     * const { count } = await prisma.lembrete.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LembreteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LembreteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lembretes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LembreteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lembretes
     * const lembrete = await prisma.lembrete.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LembreteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LembreteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lembrete.
     * @param {LembreteUpsertArgs} args - Arguments to update or create a Lembrete.
     * @example
     * // Update or create a Lembrete
     * const lembrete = await prisma.lembrete.upsert({
     *   create: {
     *     // ... data to create a Lembrete
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lembrete we want to update
     *   }
     * })
    **/
    upsert<T extends LembreteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LembreteUpsertArgs<ExtArgs>>
    ): Prisma__LembreteClient<$Result.GetResult<Prisma.$LembretePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Lembretes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LembreteCountArgs} args - Arguments to filter Lembretes to count.
     * @example
     * // Count the number of Lembretes
     * const count = await prisma.lembrete.count({
     *   where: {
     *     // ... the filter for the Lembretes we want to count
     *   }
     * })
    **/
    count<T extends LembreteCountArgs>(
      args?: Subset<T, LembreteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LembreteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lembrete.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LembreteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LembreteAggregateArgs>(args: Subset<T, LembreteAggregateArgs>): Prisma.PrismaPromise<GetLembreteAggregateType<T>>

    /**
     * Group by Lembrete.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LembreteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LembreteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LembreteGroupByArgs['orderBy'] }
        : { orderBy?: LembreteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LembreteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLembreteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lembrete model
   */
  readonly fields: LembreteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lembrete.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LembreteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Lembrete model
   */ 
  interface LembreteFieldRefs {
    readonly id: FieldRef<"Lembrete", 'Int'>
    readonly tipo: FieldRef<"Lembrete", 'String'>
    readonly titulo: FieldRef<"Lembrete", 'String'>
    readonly descricao: FieldRef<"Lembrete", 'String'>
    readonly data: FieldRef<"Lembrete", 'DateTime'>
    readonly concluido: FieldRef<"Lembrete", 'Boolean'>
    readonly createdAt: FieldRef<"Lembrete", 'DateTime'>
    readonly updatedAt: FieldRef<"Lembrete", 'DateTime'>
    readonly usuarioId: FieldRef<"Lembrete", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Lembrete findUnique
   */
  export type LembreteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteInclude<ExtArgs> | null
    /**
     * Filter, which Lembrete to fetch.
     */
    where: LembreteWhereUniqueInput
  }

  /**
   * Lembrete findUniqueOrThrow
   */
  export type LembreteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteInclude<ExtArgs> | null
    /**
     * Filter, which Lembrete to fetch.
     */
    where: LembreteWhereUniqueInput
  }

  /**
   * Lembrete findFirst
   */
  export type LembreteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteInclude<ExtArgs> | null
    /**
     * Filter, which Lembrete to fetch.
     */
    where?: LembreteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lembretes to fetch.
     */
    orderBy?: LembreteOrderByWithRelationInput | LembreteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lembretes.
     */
    cursor?: LembreteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lembretes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lembretes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lembretes.
     */
    distinct?: LembreteScalarFieldEnum | LembreteScalarFieldEnum[]
  }

  /**
   * Lembrete findFirstOrThrow
   */
  export type LembreteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteInclude<ExtArgs> | null
    /**
     * Filter, which Lembrete to fetch.
     */
    where?: LembreteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lembretes to fetch.
     */
    orderBy?: LembreteOrderByWithRelationInput | LembreteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lembretes.
     */
    cursor?: LembreteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lembretes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lembretes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lembretes.
     */
    distinct?: LembreteScalarFieldEnum | LembreteScalarFieldEnum[]
  }

  /**
   * Lembrete findMany
   */
  export type LembreteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteInclude<ExtArgs> | null
    /**
     * Filter, which Lembretes to fetch.
     */
    where?: LembreteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lembretes to fetch.
     */
    orderBy?: LembreteOrderByWithRelationInput | LembreteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lembretes.
     */
    cursor?: LembreteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lembretes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lembretes.
     */
    skip?: number
    distinct?: LembreteScalarFieldEnum | LembreteScalarFieldEnum[]
  }

  /**
   * Lembrete create
   */
  export type LembreteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteInclude<ExtArgs> | null
    /**
     * The data needed to create a Lembrete.
     */
    data: XOR<LembreteCreateInput, LembreteUncheckedCreateInput>
  }

  /**
   * Lembrete createMany
   */
  export type LembreteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lembretes.
     */
    data: LembreteCreateManyInput | LembreteCreateManyInput[]
  }

  /**
   * Lembrete createManyAndReturn
   */
  export type LembreteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Lembretes.
     */
    data: LembreteCreateManyInput | LembreteCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lembrete update
   */
  export type LembreteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteInclude<ExtArgs> | null
    /**
     * The data needed to update a Lembrete.
     */
    data: XOR<LembreteUpdateInput, LembreteUncheckedUpdateInput>
    /**
     * Choose, which Lembrete to update.
     */
    where: LembreteWhereUniqueInput
  }

  /**
   * Lembrete updateMany
   */
  export type LembreteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lembretes.
     */
    data: XOR<LembreteUpdateManyMutationInput, LembreteUncheckedUpdateManyInput>
    /**
     * Filter which Lembretes to update
     */
    where?: LembreteWhereInput
  }

  /**
   * Lembrete upsert
   */
  export type LembreteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteInclude<ExtArgs> | null
    /**
     * The filter to search for the Lembrete to update in case it exists.
     */
    where: LembreteWhereUniqueInput
    /**
     * In case the Lembrete found by the `where` argument doesn't exist, create a new Lembrete with this data.
     */
    create: XOR<LembreteCreateInput, LembreteUncheckedCreateInput>
    /**
     * In case the Lembrete was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LembreteUpdateInput, LembreteUncheckedUpdateInput>
  }

  /**
   * Lembrete delete
   */
  export type LembreteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteInclude<ExtArgs> | null
    /**
     * Filter which Lembrete to delete.
     */
    where: LembreteWhereUniqueInput
  }

  /**
   * Lembrete deleteMany
   */
  export type LembreteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lembretes to delete
     */
    where?: LembreteWhereInput
  }

  /**
   * Lembrete without action
   */
  export type LembreteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lembrete
     */
    select?: LembreteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LembreteInclude<ExtArgs> | null
  }


  /**
   * Model Evento
   */

  export type AggregateEvento = {
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  export type EventoAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type EventoSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type EventoMinAggregateOutputType = {
    id: number | null
    tipo: string | null
    titulo: string | null
    descricao: string | null
    dataInicio: Date | null
    dataFim: Date | null
    usuarioId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventoMaxAggregateOutputType = {
    id: number | null
    tipo: string | null
    titulo: string | null
    descricao: string | null
    dataInicio: Date | null
    dataFim: Date | null
    usuarioId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EventoCountAggregateOutputType = {
    id: number
    tipo: number
    titulo: number
    descricao: number
    dataInicio: number
    dataFim: number
    usuarioId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EventoAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type EventoSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type EventoMinAggregateInputType = {
    id?: true
    tipo?: true
    titulo?: true
    descricao?: true
    dataInicio?: true
    dataFim?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventoMaxAggregateInputType = {
    id?: true
    tipo?: true
    titulo?: true
    descricao?: true
    dataInicio?: true
    dataFim?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EventoCountAggregateInputType = {
    id?: true
    tipo?: true
    titulo?: true
    descricao?: true
    dataInicio?: true
    dataFim?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EventoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Evento to aggregate.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Eventos
    **/
    _count?: true | EventoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventoMaxAggregateInputType
  }

  export type GetEventoAggregateType<T extends EventoAggregateArgs> = {
        [P in keyof T & keyof AggregateEvento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvento[P]>
      : GetScalarType<T[P], AggregateEvento[P]>
  }




  export type EventoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
    orderBy?: EventoOrderByWithAggregationInput | EventoOrderByWithAggregationInput[]
    by: EventoScalarFieldEnum[] | EventoScalarFieldEnum
    having?: EventoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventoCountAggregateInputType | true
    _avg?: EventoAvgAggregateInputType
    _sum?: EventoSumAggregateInputType
    _min?: EventoMinAggregateInputType
    _max?: EventoMaxAggregateInputType
  }

  export type EventoGroupByOutputType = {
    id: number
    tipo: string
    titulo: string
    descricao: string
    dataInicio: Date
    dataFim: Date
    usuarioId: number
    createdAt: Date
    updatedAt: Date
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  type GetEventoGroupByPayload<T extends EventoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventoGroupByOutputType[P]>
            : GetScalarType<T[P], EventoGroupByOutputType[P]>
        }
      >
    >


  export type EventoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    titulo?: boolean
    descricao?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["evento"]>

  export type EventoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    titulo?: boolean
    descricao?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["evento"]>

  export type EventoSelectScalar = {
    id?: boolean
    tipo?: boolean
    titulo?: boolean
    descricao?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EventoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EventoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EventoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Evento"
    objects: {
      usuario: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo: string
      titulo: string
      descricao: string
      dataInicio: Date
      dataFim: Date
      usuarioId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["evento"]>
    composites: {}
  }

  type EventoGetPayload<S extends boolean | null | undefined | EventoDefaultArgs> = $Result.GetResult<Prisma.$EventoPayload, S>

  type EventoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventoCountAggregateInputType | true
    }

  export interface EventoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Evento'], meta: { name: 'Evento' } }
    /**
     * Find zero or one Evento that matches the filter.
     * @param {EventoFindUniqueArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EventoFindUniqueArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Evento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventoFindUniqueOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Evento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindFirstArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Evento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Eventos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Eventos
     * const eventos = await prisma.evento.findMany()
     * 
     * // Get first 10 Eventos
     * const eventos = await prisma.evento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventoWithIdOnly = await prisma.evento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Evento.
     * @param {EventoCreateArgs} args - Arguments to create a Evento.
     * @example
     * // Create one Evento
     * const Evento = await prisma.evento.create({
     *   data: {
     *     // ... data to create a Evento
     *   }
     * })
     * 
    **/
    create<T extends EventoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventoCreateArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Eventos.
     * @param {EventoCreateManyArgs} args - Arguments to create many Eventos.
     * @example
     * // Create many Eventos
     * const evento = await prisma.evento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends EventoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Eventos and returns the data saved in the database.
     * @param {EventoCreateManyAndReturnArgs} args - Arguments to create many Eventos.
     * @example
     * // Create many Eventos
     * const evento = await prisma.evento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Eventos and only return the `id`
     * const eventoWithIdOnly = await prisma.evento.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends EventoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Evento.
     * @param {EventoDeleteArgs} args - Arguments to delete one Evento.
     * @example
     * // Delete one Evento
     * const Evento = await prisma.evento.delete({
     *   where: {
     *     // ... filter to delete one Evento
     *   }
     * })
     * 
    **/
    delete<T extends EventoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventoDeleteArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Evento.
     * @param {EventoUpdateArgs} args - Arguments to update one Evento.
     * @example
     * // Update one Evento
     * const evento = await prisma.evento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpdateArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Eventos.
     * @param {EventoDeleteManyArgs} args - Arguments to filter Eventos to delete.
     * @example
     * // Delete a few Eventos
     * const { count } = await prisma.evento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Eventos
     * const evento = await prisma.evento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Evento.
     * @param {EventoUpsertArgs} args - Arguments to update or create a Evento.
     * @example
     * // Update or create a Evento
     * const evento = await prisma.evento.upsert({
     *   create: {
     *     // ... data to create a Evento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Evento we want to update
     *   }
     * })
    **/
    upsert<T extends EventoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpsertArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoCountArgs} args - Arguments to filter Eventos to count.
     * @example
     * // Count the number of Eventos
     * const count = await prisma.evento.count({
     *   where: {
     *     // ... the filter for the Eventos we want to count
     *   }
     * })
    **/
    count<T extends EventoCountArgs>(
      args?: Subset<T, EventoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventoAggregateArgs>(args: Subset<T, EventoAggregateArgs>): Prisma.PrismaPromise<GetEventoAggregateType<T>>

    /**
     * Group by Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventoGroupByArgs['orderBy'] }
        : { orderBy?: EventoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Evento model
   */
  readonly fields: EventoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Evento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Evento model
   */ 
  interface EventoFieldRefs {
    readonly id: FieldRef<"Evento", 'Int'>
    readonly tipo: FieldRef<"Evento", 'String'>
    readonly titulo: FieldRef<"Evento", 'String'>
    readonly descricao: FieldRef<"Evento", 'String'>
    readonly dataInicio: FieldRef<"Evento", 'DateTime'>
    readonly dataFim: FieldRef<"Evento", 'DateTime'>
    readonly usuarioId: FieldRef<"Evento", 'Int'>
    readonly createdAt: FieldRef<"Evento", 'DateTime'>
    readonly updatedAt: FieldRef<"Evento", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Evento findUnique
   */
  export type EventoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento findUniqueOrThrow
   */
  export type EventoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento findFirst
   */
  export type EventoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * Evento findFirstOrThrow
   */
  export type EventoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * Evento findMany
   */
  export type EventoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Eventos to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * Evento create
   */
  export type EventoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The data needed to create a Evento.
     */
    data: XOR<EventoCreateInput, EventoUncheckedCreateInput>
  }

  /**
   * Evento createMany
   */
  export type EventoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Eventos.
     */
    data: EventoCreateManyInput | EventoCreateManyInput[]
  }

  /**
   * Evento createManyAndReturn
   */
  export type EventoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Eventos.
     */
    data: EventoCreateManyInput | EventoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Evento update
   */
  export type EventoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The data needed to update a Evento.
     */
    data: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
    /**
     * Choose, which Evento to update.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento updateMany
   */
  export type EventoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Eventos.
     */
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyInput>
    /**
     * Filter which Eventos to update
     */
    where?: EventoWhereInput
  }

  /**
   * Evento upsert
   */
  export type EventoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The filter to search for the Evento to update in case it exists.
     */
    where: EventoWhereUniqueInput
    /**
     * In case the Evento found by the `where` argument doesn't exist, create a new Evento with this data.
     */
    create: XOR<EventoCreateInput, EventoUncheckedCreateInput>
    /**
     * In case the Evento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
  }

  /**
   * Evento delete
   */
  export type EventoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter which Evento to delete.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento deleteMany
   */
  export type EventoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Eventos to delete
     */
    where?: EventoWhereInput
  }

  /**
   * Evento without action
   */
  export type EventoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
  }


  /**
   * Model Publicacao
   */

  export type AggregatePublicacao = {
    _count: PublicacaoCountAggregateOutputType | null
    _avg: PublicacaoAvgAggregateOutputType | null
    _sum: PublicacaoSumAggregateOutputType | null
    _min: PublicacaoMinAggregateOutputType | null
    _max: PublicacaoMaxAggregateOutputType | null
  }

  export type PublicacaoAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type PublicacaoSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type PublicacaoMinAggregateOutputType = {
    id: number | null
    tipo: string | null
    titulo: string | null
    descricao: string | null
    conteudo: string | null
    usuarioId: number | null
    imagem: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PublicacaoMaxAggregateOutputType = {
    id: number | null
    tipo: string | null
    titulo: string | null
    descricao: string | null
    conteudo: string | null
    usuarioId: number | null
    imagem: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PublicacaoCountAggregateOutputType = {
    id: number
    tipo: number
    titulo: number
    descricao: number
    conteudo: number
    usuarioId: number
    imagem: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PublicacaoAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type PublicacaoSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type PublicacaoMinAggregateInputType = {
    id?: true
    tipo?: true
    titulo?: true
    descricao?: true
    conteudo?: true
    usuarioId?: true
    imagem?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PublicacaoMaxAggregateInputType = {
    id?: true
    tipo?: true
    titulo?: true
    descricao?: true
    conteudo?: true
    usuarioId?: true
    imagem?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PublicacaoCountAggregateInputType = {
    id?: true
    tipo?: true
    titulo?: true
    descricao?: true
    conteudo?: true
    usuarioId?: true
    imagem?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PublicacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Publicacao to aggregate.
     */
    where?: PublicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacaos to fetch.
     */
    orderBy?: PublicacaoOrderByWithRelationInput | PublicacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PublicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Publicacaos
    **/
    _count?: true | PublicacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PublicacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PublicacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublicacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublicacaoMaxAggregateInputType
  }

  export type GetPublicacaoAggregateType<T extends PublicacaoAggregateArgs> = {
        [P in keyof T & keyof AggregatePublicacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublicacao[P]>
      : GetScalarType<T[P], AggregatePublicacao[P]>
  }




  export type PublicacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicacaoWhereInput
    orderBy?: PublicacaoOrderByWithAggregationInput | PublicacaoOrderByWithAggregationInput[]
    by: PublicacaoScalarFieldEnum[] | PublicacaoScalarFieldEnum
    having?: PublicacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublicacaoCountAggregateInputType | true
    _avg?: PublicacaoAvgAggregateInputType
    _sum?: PublicacaoSumAggregateInputType
    _min?: PublicacaoMinAggregateInputType
    _max?: PublicacaoMaxAggregateInputType
  }

  export type PublicacaoGroupByOutputType = {
    id: number
    tipo: string
    titulo: string
    descricao: string
    conteudo: string
    usuarioId: number
    imagem: string | null
    createdAt: Date
    updatedAt: Date
    _count: PublicacaoCountAggregateOutputType | null
    _avg: PublicacaoAvgAggregateOutputType | null
    _sum: PublicacaoSumAggregateOutputType | null
    _min: PublicacaoMinAggregateOutputType | null
    _max: PublicacaoMaxAggregateOutputType | null
  }

  type GetPublicacaoGroupByPayload<T extends PublicacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublicacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublicacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublicacaoGroupByOutputType[P]>
            : GetScalarType<T[P], PublicacaoGroupByOutputType[P]>
        }
      >
    >


  export type PublicacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    titulo?: boolean
    descricao?: boolean
    conteudo?: boolean
    usuarioId?: boolean
    imagem?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publicacao"]>

  export type PublicacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    titulo?: boolean
    descricao?: boolean
    conteudo?: boolean
    usuarioId?: boolean
    imagem?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publicacao"]>

  export type PublicacaoSelectScalar = {
    id?: boolean
    tipo?: boolean
    titulo?: boolean
    descricao?: boolean
    conteudo?: boolean
    usuarioId?: boolean
    imagem?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PublicacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PublicacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PublicacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Publicacao"
    objects: {
      usuario: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo: string
      titulo: string
      descricao: string
      conteudo: string
      usuarioId: number
      imagem: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["publicacao"]>
    composites: {}
  }

  type PublicacaoGetPayload<S extends boolean | null | undefined | PublicacaoDefaultArgs> = $Result.GetResult<Prisma.$PublicacaoPayload, S>

  type PublicacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PublicacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PublicacaoCountAggregateInputType | true
    }

  export interface PublicacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Publicacao'], meta: { name: 'Publicacao' } }
    /**
     * Find zero or one Publicacao that matches the filter.
     * @param {PublicacaoFindUniqueArgs} args - Arguments to find a Publicacao
     * @example
     * // Get one Publicacao
     * const publicacao = await prisma.publicacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PublicacaoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacaoFindUniqueArgs<ExtArgs>>
    ): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Publicacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PublicacaoFindUniqueOrThrowArgs} args - Arguments to find a Publicacao
     * @example
     * // Get one Publicacao
     * const publicacao = await prisma.publicacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PublicacaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Publicacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoFindFirstArgs} args - Arguments to find a Publicacao
     * @example
     * // Get one Publicacao
     * const publicacao = await prisma.publicacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PublicacaoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacaoFindFirstArgs<ExtArgs>>
    ): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Publicacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoFindFirstOrThrowArgs} args - Arguments to find a Publicacao
     * @example
     * // Get one Publicacao
     * const publicacao = await prisma.publicacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PublicacaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Publicacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Publicacaos
     * const publicacaos = await prisma.publicacao.findMany()
     * 
     * // Get first 10 Publicacaos
     * const publicacaos = await prisma.publicacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const publicacaoWithIdOnly = await prisma.publicacao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PublicacaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Publicacao.
     * @param {PublicacaoCreateArgs} args - Arguments to create a Publicacao.
     * @example
     * // Create one Publicacao
     * const Publicacao = await prisma.publicacao.create({
     *   data: {
     *     // ... data to create a Publicacao
     *   }
     * })
     * 
    **/
    create<T extends PublicacaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacaoCreateArgs<ExtArgs>>
    ): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Publicacaos.
     * @param {PublicacaoCreateManyArgs} args - Arguments to create many Publicacaos.
     * @example
     * // Create many Publicacaos
     * const publicacao = await prisma.publicacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PublicacaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Publicacaos and returns the data saved in the database.
     * @param {PublicacaoCreateManyAndReturnArgs} args - Arguments to create many Publicacaos.
     * @example
     * // Create many Publicacaos
     * const publicacao = await prisma.publicacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Publicacaos and only return the `id`
     * const publicacaoWithIdOnly = await prisma.publicacao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PublicacaoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacaoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Publicacao.
     * @param {PublicacaoDeleteArgs} args - Arguments to delete one Publicacao.
     * @example
     * // Delete one Publicacao
     * const Publicacao = await prisma.publicacao.delete({
     *   where: {
     *     // ... filter to delete one Publicacao
     *   }
     * })
     * 
    **/
    delete<T extends PublicacaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacaoDeleteArgs<ExtArgs>>
    ): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Publicacao.
     * @param {PublicacaoUpdateArgs} args - Arguments to update one Publicacao.
     * @example
     * // Update one Publicacao
     * const publicacao = await prisma.publicacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PublicacaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacaoUpdateArgs<ExtArgs>>
    ): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Publicacaos.
     * @param {PublicacaoDeleteManyArgs} args - Arguments to filter Publicacaos to delete.
     * @example
     * // Delete a few Publicacaos
     * const { count } = await prisma.publicacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PublicacaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PublicacaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Publicacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Publicacaos
     * const publicacao = await prisma.publicacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PublicacaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Publicacao.
     * @param {PublicacaoUpsertArgs} args - Arguments to update or create a Publicacao.
     * @example
     * // Update or create a Publicacao
     * const publicacao = await prisma.publicacao.upsert({
     *   create: {
     *     // ... data to create a Publicacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Publicacao we want to update
     *   }
     * })
    **/
    upsert<T extends PublicacaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PublicacaoUpsertArgs<ExtArgs>>
    ): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Publicacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoCountArgs} args - Arguments to filter Publicacaos to count.
     * @example
     * // Count the number of Publicacaos
     * const count = await prisma.publicacao.count({
     *   where: {
     *     // ... the filter for the Publicacaos we want to count
     *   }
     * })
    **/
    count<T extends PublicacaoCountArgs>(
      args?: Subset<T, PublicacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublicacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Publicacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublicacaoAggregateArgs>(args: Subset<T, PublicacaoAggregateArgs>): Prisma.PrismaPromise<GetPublicacaoAggregateType<T>>

    /**
     * Group by Publicacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublicacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublicacaoGroupByArgs['orderBy'] }
        : { orderBy?: PublicacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublicacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublicacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Publicacao model
   */
  readonly fields: PublicacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Publicacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PublicacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Publicacao model
   */ 
  interface PublicacaoFieldRefs {
    readonly id: FieldRef<"Publicacao", 'Int'>
    readonly tipo: FieldRef<"Publicacao", 'String'>
    readonly titulo: FieldRef<"Publicacao", 'String'>
    readonly descricao: FieldRef<"Publicacao", 'String'>
    readonly conteudo: FieldRef<"Publicacao", 'String'>
    readonly usuarioId: FieldRef<"Publicacao", 'Int'>
    readonly imagem: FieldRef<"Publicacao", 'String'>
    readonly createdAt: FieldRef<"Publicacao", 'DateTime'>
    readonly updatedAt: FieldRef<"Publicacao", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Publicacao findUnique
   */
  export type PublicacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Publicacao to fetch.
     */
    where: PublicacaoWhereUniqueInput
  }

  /**
   * Publicacao findUniqueOrThrow
   */
  export type PublicacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Publicacao to fetch.
     */
    where: PublicacaoWhereUniqueInput
  }

  /**
   * Publicacao findFirst
   */
  export type PublicacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Publicacao to fetch.
     */
    where?: PublicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacaos to fetch.
     */
    orderBy?: PublicacaoOrderByWithRelationInput | PublicacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Publicacaos.
     */
    cursor?: PublicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Publicacaos.
     */
    distinct?: PublicacaoScalarFieldEnum | PublicacaoScalarFieldEnum[]
  }

  /**
   * Publicacao findFirstOrThrow
   */
  export type PublicacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Publicacao to fetch.
     */
    where?: PublicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacaos to fetch.
     */
    orderBy?: PublicacaoOrderByWithRelationInput | PublicacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Publicacaos.
     */
    cursor?: PublicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Publicacaos.
     */
    distinct?: PublicacaoScalarFieldEnum | PublicacaoScalarFieldEnum[]
  }

  /**
   * Publicacao findMany
   */
  export type PublicacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Publicacaos to fetch.
     */
    where?: PublicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacaos to fetch.
     */
    orderBy?: PublicacaoOrderByWithRelationInput | PublicacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Publicacaos.
     */
    cursor?: PublicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacaos.
     */
    skip?: number
    distinct?: PublicacaoScalarFieldEnum | PublicacaoScalarFieldEnum[]
  }

  /**
   * Publicacao create
   */
  export type PublicacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Publicacao.
     */
    data: XOR<PublicacaoCreateInput, PublicacaoUncheckedCreateInput>
  }

  /**
   * Publicacao createMany
   */
  export type PublicacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Publicacaos.
     */
    data: PublicacaoCreateManyInput | PublicacaoCreateManyInput[]
  }

  /**
   * Publicacao createManyAndReturn
   */
  export type PublicacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Publicacaos.
     */
    data: PublicacaoCreateManyInput | PublicacaoCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Publicacao update
   */
  export type PublicacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Publicacao.
     */
    data: XOR<PublicacaoUpdateInput, PublicacaoUncheckedUpdateInput>
    /**
     * Choose, which Publicacao to update.
     */
    where: PublicacaoWhereUniqueInput
  }

  /**
   * Publicacao updateMany
   */
  export type PublicacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Publicacaos.
     */
    data: XOR<PublicacaoUpdateManyMutationInput, PublicacaoUncheckedUpdateManyInput>
    /**
     * Filter which Publicacaos to update
     */
    where?: PublicacaoWhereInput
  }

  /**
   * Publicacao upsert
   */
  export type PublicacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Publicacao to update in case it exists.
     */
    where: PublicacaoWhereUniqueInput
    /**
     * In case the Publicacao found by the `where` argument doesn't exist, create a new Publicacao with this data.
     */
    create: XOR<PublicacaoCreateInput, PublicacaoUncheckedCreateInput>
    /**
     * In case the Publicacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PublicacaoUpdateInput, PublicacaoUncheckedUpdateInput>
  }

  /**
   * Publicacao delete
   */
  export type PublicacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter which Publicacao to delete.
     */
    where: PublicacaoWhereUniqueInput
  }

  /**
   * Publicacao deleteMany
   */
  export type PublicacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Publicacaos to delete
     */
    where?: PublicacaoWhereInput
  }

  /**
   * Publicacao without action
   */
  export type PublicacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
  }


  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
    planoId: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
    planoId: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    dataNascimento: Date | null
    dataInicio: Date | null
    vencimento: Date | null
    status: string | null
    planoId: number | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    dataNascimento: Date | null
    dataInicio: Date | null
    vencimento: Date | null
    status: string | null
    planoId: number | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    dataNascimento: number
    dataInicio: number
    vencimento: number
    status: number
    planoId: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
    planoId?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
    planoId?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    dataInicio?: true
    vencimento?: true
    status?: true
    planoId?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    dataInicio?: true
    vencimento?: true
    status?: true
    planoId?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    dataNascimento?: true
    dataInicio?: true
    vencimento?: true
    status?: true
    planoId?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: number
    nome: string
    email: string
    telefone: string | null
    dataNascimento: Date
    dataInicio: Date
    vencimento: Date | null
    status: string
    planoId: number
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    dataNascimento?: boolean
    dataInicio?: boolean
    vencimento?: boolean
    status?: boolean
    planoId?: boolean
    plano?: boolean | PlanoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    dataNascimento?: boolean
    dataInicio?: boolean
    vencimento?: boolean
    status?: boolean
    planoId?: boolean
    plano?: boolean | PlanoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>

  export type ClienteSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    dataNascimento?: boolean
    dataInicio?: boolean
    vencimento?: boolean
    status?: boolean
    planoId?: boolean
  }

  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plano?: boolean | PlanoDefaultArgs<ExtArgs>
  }
  export type ClienteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plano?: boolean | PlanoDefaultArgs<ExtArgs>
  }

  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      plano: Prisma.$PlanoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      telefone: string | null
      dataNascimento: Date
      dataInicio: Date
      vencimento: Date | null
      status: string
      planoId: number
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClienteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClienteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClienteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
    **/
    create<T extends ClienteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ClienteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clientes and returns the data saved in the database.
     * @param {ClienteCreateManyAndReturnArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clientes and only return the `id`
     * const clienteWithIdOnly = await prisma.cliente.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ClienteCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
    **/
    delete<T extends ClienteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClienteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClienteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClienteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
    **/
    upsert<T extends ClienteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>
    ): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    plano<T extends PlanoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanoDefaultArgs<ExtArgs>>): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cliente model
   */ 
  interface ClienteFieldRefs {
    readonly id: FieldRef<"Cliente", 'Int'>
    readonly nome: FieldRef<"Cliente", 'String'>
    readonly email: FieldRef<"Cliente", 'String'>
    readonly telefone: FieldRef<"Cliente", 'String'>
    readonly dataNascimento: FieldRef<"Cliente", 'DateTime'>
    readonly dataInicio: FieldRef<"Cliente", 'DateTime'>
    readonly vencimento: FieldRef<"Cliente", 'DateTime'>
    readonly status: FieldRef<"Cliente", 'String'>
    readonly planoId: FieldRef<"Cliente", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
  }

  /**
   * Cliente createManyAndReturn
   */
  export type ClienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model Instrutor
   */

  export type AggregateInstrutor = {
    _count: InstrutorCountAggregateOutputType | null
    _avg: InstrutorAvgAggregateOutputType | null
    _sum: InstrutorSumAggregateOutputType | null
    _min: InstrutorMinAggregateOutputType | null
    _max: InstrutorMaxAggregateOutputType | null
  }

  export type InstrutorAvgAggregateOutputType = {
    id: number | null
  }

  export type InstrutorSumAggregateOutputType = {
    id: number | null
  }

  export type InstrutorMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    turno: string | null
  }

  export type InstrutorMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    telefone: string | null
    turno: string | null
  }

  export type InstrutorCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    telefone: number
    turno: number
    _all: number
  }


  export type InstrutorAvgAggregateInputType = {
    id?: true
  }

  export type InstrutorSumAggregateInputType = {
    id?: true
  }

  export type InstrutorMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    turno?: true
  }

  export type InstrutorMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    turno?: true
  }

  export type InstrutorCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    telefone?: true
    turno?: true
    _all?: true
  }

  export type InstrutorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instrutor to aggregate.
     */
    where?: InstrutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instrutors to fetch.
     */
    orderBy?: InstrutorOrderByWithRelationInput | InstrutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstrutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instrutors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instrutors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Instrutors
    **/
    _count?: true | InstrutorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstrutorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstrutorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstrutorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstrutorMaxAggregateInputType
  }

  export type GetInstrutorAggregateType<T extends InstrutorAggregateArgs> = {
        [P in keyof T & keyof AggregateInstrutor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstrutor[P]>
      : GetScalarType<T[P], AggregateInstrutor[P]>
  }




  export type InstrutorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstrutorWhereInput
    orderBy?: InstrutorOrderByWithAggregationInput | InstrutorOrderByWithAggregationInput[]
    by: InstrutorScalarFieldEnum[] | InstrutorScalarFieldEnum
    having?: InstrutorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstrutorCountAggregateInputType | true
    _avg?: InstrutorAvgAggregateInputType
    _sum?: InstrutorSumAggregateInputType
    _min?: InstrutorMinAggregateInputType
    _max?: InstrutorMaxAggregateInputType
  }

  export type InstrutorGroupByOutputType = {
    id: number
    nome: string
    email: string
    telefone: string | null
    turno: string
    _count: InstrutorCountAggregateOutputType | null
    _avg: InstrutorAvgAggregateOutputType | null
    _sum: InstrutorSumAggregateOutputType | null
    _min: InstrutorMinAggregateOutputType | null
    _max: InstrutorMaxAggregateOutputType | null
  }

  type GetInstrutorGroupByPayload<T extends InstrutorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstrutorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstrutorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstrutorGroupByOutputType[P]>
            : GetScalarType<T[P], InstrutorGroupByOutputType[P]>
        }
      >
    >


  export type InstrutorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    turno?: boolean
  }, ExtArgs["result"]["instrutor"]>

  export type InstrutorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    turno?: boolean
  }, ExtArgs["result"]["instrutor"]>

  export type InstrutorSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    telefone?: boolean
    turno?: boolean
  }


  export type $InstrutorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Instrutor"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      telefone: string | null
      turno: string
    }, ExtArgs["result"]["instrutor"]>
    composites: {}
  }

  type InstrutorGetPayload<S extends boolean | null | undefined | InstrutorDefaultArgs> = $Result.GetResult<Prisma.$InstrutorPayload, S>

  type InstrutorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InstrutorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InstrutorCountAggregateInputType | true
    }

  export interface InstrutorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Instrutor'], meta: { name: 'Instrutor' } }
    /**
     * Find zero or one Instrutor that matches the filter.
     * @param {InstrutorFindUniqueArgs} args - Arguments to find a Instrutor
     * @example
     * // Get one Instrutor
     * const instrutor = await prisma.instrutor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InstrutorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InstrutorFindUniqueArgs<ExtArgs>>
    ): Prisma__InstrutorClient<$Result.GetResult<Prisma.$InstrutorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Instrutor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InstrutorFindUniqueOrThrowArgs} args - Arguments to find a Instrutor
     * @example
     * // Get one Instrutor
     * const instrutor = await prisma.instrutor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InstrutorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrutorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InstrutorClient<$Result.GetResult<Prisma.$InstrutorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Instrutor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrutorFindFirstArgs} args - Arguments to find a Instrutor
     * @example
     * // Get one Instrutor
     * const instrutor = await prisma.instrutor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InstrutorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrutorFindFirstArgs<ExtArgs>>
    ): Prisma__InstrutorClient<$Result.GetResult<Prisma.$InstrutorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Instrutor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrutorFindFirstOrThrowArgs} args - Arguments to find a Instrutor
     * @example
     * // Get one Instrutor
     * const instrutor = await prisma.instrutor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InstrutorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrutorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InstrutorClient<$Result.GetResult<Prisma.$InstrutorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Instrutors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrutorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Instrutors
     * const instrutors = await prisma.instrutor.findMany()
     * 
     * // Get first 10 Instrutors
     * const instrutors = await prisma.instrutor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instrutorWithIdOnly = await prisma.instrutor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InstrutorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrutorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstrutorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Instrutor.
     * @param {InstrutorCreateArgs} args - Arguments to create a Instrutor.
     * @example
     * // Create one Instrutor
     * const Instrutor = await prisma.instrutor.create({
     *   data: {
     *     // ... data to create a Instrutor
     *   }
     * })
     * 
    **/
    create<T extends InstrutorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InstrutorCreateArgs<ExtArgs>>
    ): Prisma__InstrutorClient<$Result.GetResult<Prisma.$InstrutorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Instrutors.
     * @param {InstrutorCreateManyArgs} args - Arguments to create many Instrutors.
     * @example
     * // Create many Instrutors
     * const instrutor = await prisma.instrutor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends InstrutorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrutorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Instrutors and returns the data saved in the database.
     * @param {InstrutorCreateManyAndReturnArgs} args - Arguments to create many Instrutors.
     * @example
     * // Create many Instrutors
     * const instrutor = await prisma.instrutor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Instrutors and only return the `id`
     * const instrutorWithIdOnly = await prisma.instrutor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends InstrutorCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrutorCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstrutorPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Instrutor.
     * @param {InstrutorDeleteArgs} args - Arguments to delete one Instrutor.
     * @example
     * // Delete one Instrutor
     * const Instrutor = await prisma.instrutor.delete({
     *   where: {
     *     // ... filter to delete one Instrutor
     *   }
     * })
     * 
    **/
    delete<T extends InstrutorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InstrutorDeleteArgs<ExtArgs>>
    ): Prisma__InstrutorClient<$Result.GetResult<Prisma.$InstrutorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Instrutor.
     * @param {InstrutorUpdateArgs} args - Arguments to update one Instrutor.
     * @example
     * // Update one Instrutor
     * const instrutor = await prisma.instrutor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InstrutorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InstrutorUpdateArgs<ExtArgs>>
    ): Prisma__InstrutorClient<$Result.GetResult<Prisma.$InstrutorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Instrutors.
     * @param {InstrutorDeleteManyArgs} args - Arguments to filter Instrutors to delete.
     * @example
     * // Delete a few Instrutors
     * const { count } = await prisma.instrutor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InstrutorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstrutorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instrutors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrutorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Instrutors
     * const instrutor = await prisma.instrutor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InstrutorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InstrutorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Instrutor.
     * @param {InstrutorUpsertArgs} args - Arguments to update or create a Instrutor.
     * @example
     * // Update or create a Instrutor
     * const instrutor = await prisma.instrutor.upsert({
     *   create: {
     *     // ... data to create a Instrutor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Instrutor we want to update
     *   }
     * })
    **/
    upsert<T extends InstrutorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InstrutorUpsertArgs<ExtArgs>>
    ): Prisma__InstrutorClient<$Result.GetResult<Prisma.$InstrutorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Instrutors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrutorCountArgs} args - Arguments to filter Instrutors to count.
     * @example
     * // Count the number of Instrutors
     * const count = await prisma.instrutor.count({
     *   where: {
     *     // ... the filter for the Instrutors we want to count
     *   }
     * })
    **/
    count<T extends InstrutorCountArgs>(
      args?: Subset<T, InstrutorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstrutorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Instrutor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrutorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstrutorAggregateArgs>(args: Subset<T, InstrutorAggregateArgs>): Prisma.PrismaPromise<GetInstrutorAggregateType<T>>

    /**
     * Group by Instrutor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrutorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstrutorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstrutorGroupByArgs['orderBy'] }
        : { orderBy?: InstrutorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstrutorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstrutorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Instrutor model
   */
  readonly fields: InstrutorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Instrutor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstrutorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Instrutor model
   */ 
  interface InstrutorFieldRefs {
    readonly id: FieldRef<"Instrutor", 'Int'>
    readonly nome: FieldRef<"Instrutor", 'String'>
    readonly email: FieldRef<"Instrutor", 'String'>
    readonly telefone: FieldRef<"Instrutor", 'String'>
    readonly turno: FieldRef<"Instrutor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Instrutor findUnique
   */
  export type InstrutorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrutor
     */
    select?: InstrutorSelect<ExtArgs> | null
    /**
     * Filter, which Instrutor to fetch.
     */
    where: InstrutorWhereUniqueInput
  }

  /**
   * Instrutor findUniqueOrThrow
   */
  export type InstrutorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrutor
     */
    select?: InstrutorSelect<ExtArgs> | null
    /**
     * Filter, which Instrutor to fetch.
     */
    where: InstrutorWhereUniqueInput
  }

  /**
   * Instrutor findFirst
   */
  export type InstrutorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrutor
     */
    select?: InstrutorSelect<ExtArgs> | null
    /**
     * Filter, which Instrutor to fetch.
     */
    where?: InstrutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instrutors to fetch.
     */
    orderBy?: InstrutorOrderByWithRelationInput | InstrutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instrutors.
     */
    cursor?: InstrutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instrutors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instrutors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instrutors.
     */
    distinct?: InstrutorScalarFieldEnum | InstrutorScalarFieldEnum[]
  }

  /**
   * Instrutor findFirstOrThrow
   */
  export type InstrutorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrutor
     */
    select?: InstrutorSelect<ExtArgs> | null
    /**
     * Filter, which Instrutor to fetch.
     */
    where?: InstrutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instrutors to fetch.
     */
    orderBy?: InstrutorOrderByWithRelationInput | InstrutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instrutors.
     */
    cursor?: InstrutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instrutors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instrutors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instrutors.
     */
    distinct?: InstrutorScalarFieldEnum | InstrutorScalarFieldEnum[]
  }

  /**
   * Instrutor findMany
   */
  export type InstrutorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrutor
     */
    select?: InstrutorSelect<ExtArgs> | null
    /**
     * Filter, which Instrutors to fetch.
     */
    where?: InstrutorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instrutors to fetch.
     */
    orderBy?: InstrutorOrderByWithRelationInput | InstrutorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Instrutors.
     */
    cursor?: InstrutorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instrutors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instrutors.
     */
    skip?: number
    distinct?: InstrutorScalarFieldEnum | InstrutorScalarFieldEnum[]
  }

  /**
   * Instrutor create
   */
  export type InstrutorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrutor
     */
    select?: InstrutorSelect<ExtArgs> | null
    /**
     * The data needed to create a Instrutor.
     */
    data: XOR<InstrutorCreateInput, InstrutorUncheckedCreateInput>
  }

  /**
   * Instrutor createMany
   */
  export type InstrutorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Instrutors.
     */
    data: InstrutorCreateManyInput | InstrutorCreateManyInput[]
  }

  /**
   * Instrutor createManyAndReturn
   */
  export type InstrutorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrutor
     */
    select?: InstrutorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Instrutors.
     */
    data: InstrutorCreateManyInput | InstrutorCreateManyInput[]
  }

  /**
   * Instrutor update
   */
  export type InstrutorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrutor
     */
    select?: InstrutorSelect<ExtArgs> | null
    /**
     * The data needed to update a Instrutor.
     */
    data: XOR<InstrutorUpdateInput, InstrutorUncheckedUpdateInput>
    /**
     * Choose, which Instrutor to update.
     */
    where: InstrutorWhereUniqueInput
  }

  /**
   * Instrutor updateMany
   */
  export type InstrutorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Instrutors.
     */
    data: XOR<InstrutorUpdateManyMutationInput, InstrutorUncheckedUpdateManyInput>
    /**
     * Filter which Instrutors to update
     */
    where?: InstrutorWhereInput
  }

  /**
   * Instrutor upsert
   */
  export type InstrutorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrutor
     */
    select?: InstrutorSelect<ExtArgs> | null
    /**
     * The filter to search for the Instrutor to update in case it exists.
     */
    where: InstrutorWhereUniqueInput
    /**
     * In case the Instrutor found by the `where` argument doesn't exist, create a new Instrutor with this data.
     */
    create: XOR<InstrutorCreateInput, InstrutorUncheckedCreateInput>
    /**
     * In case the Instrutor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstrutorUpdateInput, InstrutorUncheckedUpdateInput>
  }

  /**
   * Instrutor delete
   */
  export type InstrutorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrutor
     */
    select?: InstrutorSelect<ExtArgs> | null
    /**
     * Filter which Instrutor to delete.
     */
    where: InstrutorWhereUniqueInput
  }

  /**
   * Instrutor deleteMany
   */
  export type InstrutorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instrutors to delete
     */
    where?: InstrutorWhereInput
  }

  /**
   * Instrutor without action
   */
  export type InstrutorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrutor
     */
    select?: InstrutorSelect<ExtArgs> | null
  }


  /**
   * Model Plano
   */

  export type AggregatePlano = {
    _count: PlanoCountAggregateOutputType | null
    _avg: PlanoAvgAggregateOutputType | null
    _sum: PlanoSumAggregateOutputType | null
    _min: PlanoMinAggregateOutputType | null
    _max: PlanoMaxAggregateOutputType | null
  }

  export type PlanoAvgAggregateOutputType = {
    id: number | null
    valor: number | null
  }

  export type PlanoSumAggregateOutputType = {
    id: number | null
    valor: number | null
  }

  export type PlanoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    valor: number | null
    descricao: string | null
  }

  export type PlanoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    valor: number | null
    descricao: string | null
  }

  export type PlanoCountAggregateOutputType = {
    id: number
    nome: number
    valor: number
    descricao: number
    _all: number
  }


  export type PlanoAvgAggregateInputType = {
    id?: true
    valor?: true
  }

  export type PlanoSumAggregateInputType = {
    id?: true
    valor?: true
  }

  export type PlanoMinAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
    descricao?: true
  }

  export type PlanoMaxAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
    descricao?: true
  }

  export type PlanoCountAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
    descricao?: true
    _all?: true
  }

  export type PlanoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plano to aggregate.
     */
    where?: PlanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planos to fetch.
     */
    orderBy?: PlanoOrderByWithRelationInput | PlanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Planos
    **/
    _count?: true | PlanoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanoMaxAggregateInputType
  }

  export type GetPlanoAggregateType<T extends PlanoAggregateArgs> = {
        [P in keyof T & keyof AggregatePlano]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlano[P]>
      : GetScalarType<T[P], AggregatePlano[P]>
  }




  export type PlanoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanoWhereInput
    orderBy?: PlanoOrderByWithAggregationInput | PlanoOrderByWithAggregationInput[]
    by: PlanoScalarFieldEnum[] | PlanoScalarFieldEnum
    having?: PlanoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanoCountAggregateInputType | true
    _avg?: PlanoAvgAggregateInputType
    _sum?: PlanoSumAggregateInputType
    _min?: PlanoMinAggregateInputType
    _max?: PlanoMaxAggregateInputType
  }

  export type PlanoGroupByOutputType = {
    id: number
    nome: string
    valor: number
    descricao: string | null
    _count: PlanoCountAggregateOutputType | null
    _avg: PlanoAvgAggregateOutputType | null
    _sum: PlanoSumAggregateOutputType | null
    _min: PlanoMinAggregateOutputType | null
    _max: PlanoMaxAggregateOutputType | null
  }

  type GetPlanoGroupByPayload<T extends PlanoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanoGroupByOutputType[P]>
            : GetScalarType<T[P], PlanoGroupByOutputType[P]>
        }
      >
    >


  export type PlanoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    valor?: boolean
    descricao?: boolean
    clientes?: boolean | Plano$clientesArgs<ExtArgs>
    _count?: boolean | PlanoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plano"]>

  export type PlanoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    valor?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["plano"]>

  export type PlanoSelectScalar = {
    id?: boolean
    nome?: boolean
    valor?: boolean
    descricao?: boolean
  }

  export type PlanoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | Plano$clientesArgs<ExtArgs>
    _count?: boolean | PlanoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlanoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlanoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plano"
    objects: {
      clientes: Prisma.$ClientePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      valor: number
      descricao: string | null
    }, ExtArgs["result"]["plano"]>
    composites: {}
  }

  type PlanoGetPayload<S extends boolean | null | undefined | PlanoDefaultArgs> = $Result.GetResult<Prisma.$PlanoPayload, S>

  type PlanoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlanoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlanoCountAggregateInputType | true
    }

  export interface PlanoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plano'], meta: { name: 'Plano' } }
    /**
     * Find zero or one Plano that matches the filter.
     * @param {PlanoFindUniqueArgs} args - Arguments to find a Plano
     * @example
     * // Get one Plano
     * const plano = await prisma.plano.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlanoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoFindUniqueArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Plano that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlanoFindUniqueOrThrowArgs} args - Arguments to find a Plano
     * @example
     * // Get one Plano
     * const plano = await prisma.plano.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlanoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Plano that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoFindFirstArgs} args - Arguments to find a Plano
     * @example
     * // Get one Plano
     * const plano = await prisma.plano.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlanoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoFindFirstArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Plano that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoFindFirstOrThrowArgs} args - Arguments to find a Plano
     * @example
     * // Get one Plano
     * const plano = await prisma.plano.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlanoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Planos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Planos
     * const planos = await prisma.plano.findMany()
     * 
     * // Get first 10 Planos
     * const planos = await prisma.plano.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planoWithIdOnly = await prisma.plano.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlanoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Plano.
     * @param {PlanoCreateArgs} args - Arguments to create a Plano.
     * @example
     * // Create one Plano
     * const Plano = await prisma.plano.create({
     *   data: {
     *     // ... data to create a Plano
     *   }
     * })
     * 
    **/
    create<T extends PlanoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoCreateArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Planos.
     * @param {PlanoCreateManyArgs} args - Arguments to create many Planos.
     * @example
     * // Create many Planos
     * const plano = await prisma.plano.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PlanoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Planos and returns the data saved in the database.
     * @param {PlanoCreateManyAndReturnArgs} args - Arguments to create many Planos.
     * @example
     * // Create many Planos
     * const plano = await prisma.plano.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Planos and only return the `id`
     * const planoWithIdOnly = await prisma.plano.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PlanoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Plano.
     * @param {PlanoDeleteArgs} args - Arguments to delete one Plano.
     * @example
     * // Delete one Plano
     * const Plano = await prisma.plano.delete({
     *   where: {
     *     // ... filter to delete one Plano
     *   }
     * })
     * 
    **/
    delete<T extends PlanoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoDeleteArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Plano.
     * @param {PlanoUpdateArgs} args - Arguments to update one Plano.
     * @example
     * // Update one Plano
     * const plano = await prisma.plano.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlanoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoUpdateArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Planos.
     * @param {PlanoDeleteManyArgs} args - Arguments to filter Planos to delete.
     * @example
     * // Delete a few Planos
     * const { count } = await prisma.plano.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlanoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Planos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Planos
     * const plano = await prisma.plano.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlanoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plano.
     * @param {PlanoUpsertArgs} args - Arguments to update or create a Plano.
     * @example
     * // Update or create a Plano
     * const plano = await prisma.plano.upsert({
     *   create: {
     *     // ... data to create a Plano
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plano we want to update
     *   }
     * })
    **/
    upsert<T extends PlanoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoUpsertArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Planos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoCountArgs} args - Arguments to filter Planos to count.
     * @example
     * // Count the number of Planos
     * const count = await prisma.plano.count({
     *   where: {
     *     // ... the filter for the Planos we want to count
     *   }
     * })
    **/
    count<T extends PlanoCountArgs>(
      args?: Subset<T, PlanoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plano.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanoAggregateArgs>(args: Subset<T, PlanoAggregateArgs>): Prisma.PrismaPromise<GetPlanoAggregateType<T>>

    /**
     * Group by Plano.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanoGroupByArgs['orderBy'] }
        : { orderBy?: PlanoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plano model
   */
  readonly fields: PlanoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plano.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    clientes<T extends Plano$clientesArgs<ExtArgs> = {}>(args?: Subset<T, Plano$clientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Plano model
   */ 
  interface PlanoFieldRefs {
    readonly id: FieldRef<"Plano", 'Int'>
    readonly nome: FieldRef<"Plano", 'String'>
    readonly valor: FieldRef<"Plano", 'Float'>
    readonly descricao: FieldRef<"Plano", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Plano findUnique
   */
  export type PlanoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter, which Plano to fetch.
     */
    where: PlanoWhereUniqueInput
  }

  /**
   * Plano findUniqueOrThrow
   */
  export type PlanoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter, which Plano to fetch.
     */
    where: PlanoWhereUniqueInput
  }

  /**
   * Plano findFirst
   */
  export type PlanoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter, which Plano to fetch.
     */
    where?: PlanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planos to fetch.
     */
    orderBy?: PlanoOrderByWithRelationInput | PlanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Planos.
     */
    cursor?: PlanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Planos.
     */
    distinct?: PlanoScalarFieldEnum | PlanoScalarFieldEnum[]
  }

  /**
   * Plano findFirstOrThrow
   */
  export type PlanoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter, which Plano to fetch.
     */
    where?: PlanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planos to fetch.
     */
    orderBy?: PlanoOrderByWithRelationInput | PlanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Planos.
     */
    cursor?: PlanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Planos.
     */
    distinct?: PlanoScalarFieldEnum | PlanoScalarFieldEnum[]
  }

  /**
   * Plano findMany
   */
  export type PlanoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter, which Planos to fetch.
     */
    where?: PlanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planos to fetch.
     */
    orderBy?: PlanoOrderByWithRelationInput | PlanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Planos.
     */
    cursor?: PlanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planos.
     */
    skip?: number
    distinct?: PlanoScalarFieldEnum | PlanoScalarFieldEnum[]
  }

  /**
   * Plano create
   */
  export type PlanoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * The data needed to create a Plano.
     */
    data: XOR<PlanoCreateInput, PlanoUncheckedCreateInput>
  }

  /**
   * Plano createMany
   */
  export type PlanoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Planos.
     */
    data: PlanoCreateManyInput | PlanoCreateManyInput[]
  }

  /**
   * Plano createManyAndReturn
   */
  export type PlanoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Planos.
     */
    data: PlanoCreateManyInput | PlanoCreateManyInput[]
  }

  /**
   * Plano update
   */
  export type PlanoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * The data needed to update a Plano.
     */
    data: XOR<PlanoUpdateInput, PlanoUncheckedUpdateInput>
    /**
     * Choose, which Plano to update.
     */
    where: PlanoWhereUniqueInput
  }

  /**
   * Plano updateMany
   */
  export type PlanoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Planos.
     */
    data: XOR<PlanoUpdateManyMutationInput, PlanoUncheckedUpdateManyInput>
    /**
     * Filter which Planos to update
     */
    where?: PlanoWhereInput
  }

  /**
   * Plano upsert
   */
  export type PlanoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * The filter to search for the Plano to update in case it exists.
     */
    where: PlanoWhereUniqueInput
    /**
     * In case the Plano found by the `where` argument doesn't exist, create a new Plano with this data.
     */
    create: XOR<PlanoCreateInput, PlanoUncheckedCreateInput>
    /**
     * In case the Plano was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanoUpdateInput, PlanoUncheckedUpdateInput>
  }

  /**
   * Plano delete
   */
  export type PlanoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter which Plano to delete.
     */
    where: PlanoWhereUniqueInput
  }

  /**
   * Plano deleteMany
   */
  export type PlanoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Planos to delete
     */
    where?: PlanoWhereInput
  }

  /**
   * Plano.clientes
   */
  export type Plano$clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    cursor?: ClienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Plano without action
   */
  export type PlanoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    username: 'username',
    senha: 'senha',
    turno: 'turno',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const LembreteScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    titulo: 'titulo',
    descricao: 'descricao',
    data: 'data',
    concluido: 'concluido',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    usuarioId: 'usuarioId'
  };

  export type LembreteScalarFieldEnum = (typeof LembreteScalarFieldEnum)[keyof typeof LembreteScalarFieldEnum]


  export const EventoScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    titulo: 'titulo',
    descricao: 'descricao',
    dataInicio: 'dataInicio',
    dataFim: 'dataFim',
    usuarioId: 'usuarioId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EventoScalarFieldEnum = (typeof EventoScalarFieldEnum)[keyof typeof EventoScalarFieldEnum]


  export const PublicacaoScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    titulo: 'titulo',
    descricao: 'descricao',
    conteudo: 'conteudo',
    usuarioId: 'usuarioId',
    imagem: 'imagem',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PublicacaoScalarFieldEnum = (typeof PublicacaoScalarFieldEnum)[keyof typeof PublicacaoScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    dataNascimento: 'dataNascimento',
    dataInicio: 'dataInicio',
    vencimento: 'vencimento',
    status: 'status',
    planoId: 'planoId'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const InstrutorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    telefone: 'telefone',
    turno: 'turno'
  };

  export type InstrutorScalarFieldEnum = (typeof InstrutorScalarFieldEnum)[keyof typeof InstrutorScalarFieldEnum]


  export const PlanoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    valor: 'valor',
    descricao: 'descricao'
  };

  export type PlanoScalarFieldEnum = (typeof PlanoScalarFieldEnum)[keyof typeof PlanoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    nome?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    telefone?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    senha?: StringFilter<"User"> | string
    turno?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    lembretes?: LembreteListRelationFilter
    eventos?: EventoListRelationFilter
    publicacoes?: PublicacaoListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    senha?: SortOrder
    turno?: SortOrder
    role?: SortOrder
    lembretes?: LembreteOrderByRelationAggregateInput
    eventos?: EventoOrderByRelationAggregateInput
    publicacoes?: PublicacaoOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    nome?: StringFilter<"User"> | string
    telefone?: StringNullableFilter<"User"> | string | null
    username?: StringNullableFilter<"User"> | string | null
    senha?: StringFilter<"User"> | string
    turno?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    lembretes?: LembreteListRelationFilter
    eventos?: EventoListRelationFilter
    publicacoes?: PublicacaoListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    senha?: SortOrder
    turno?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    nome?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    telefone?: StringNullableWithAggregatesFilter<"User"> | string | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    senha?: StringWithAggregatesFilter<"User"> | string
    turno?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
  }

  export type LembreteWhereInput = {
    AND?: LembreteWhereInput | LembreteWhereInput[]
    OR?: LembreteWhereInput[]
    NOT?: LembreteWhereInput | LembreteWhereInput[]
    id?: IntFilter<"Lembrete"> | number
    tipo?: StringFilter<"Lembrete"> | string
    titulo?: StringFilter<"Lembrete"> | string
    descricao?: StringFilter<"Lembrete"> | string
    data?: DateTimeFilter<"Lembrete"> | Date | string
    concluido?: BoolFilter<"Lembrete"> | boolean
    createdAt?: DateTimeFilter<"Lembrete"> | Date | string
    updatedAt?: DateTimeFilter<"Lembrete"> | Date | string
    usuarioId?: IntFilter<"Lembrete"> | number
    usuario?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LembreteOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    concluido?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuarioId?: SortOrder
    usuario?: UserOrderByWithRelationInput
  }

  export type LembreteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LembreteWhereInput | LembreteWhereInput[]
    OR?: LembreteWhereInput[]
    NOT?: LembreteWhereInput | LembreteWhereInput[]
    tipo?: StringFilter<"Lembrete"> | string
    titulo?: StringFilter<"Lembrete"> | string
    descricao?: StringFilter<"Lembrete"> | string
    data?: DateTimeFilter<"Lembrete"> | Date | string
    concluido?: BoolFilter<"Lembrete"> | boolean
    createdAt?: DateTimeFilter<"Lembrete"> | Date | string
    updatedAt?: DateTimeFilter<"Lembrete"> | Date | string
    usuarioId?: IntFilter<"Lembrete"> | number
    usuario?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type LembreteOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    concluido?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuarioId?: SortOrder
    _count?: LembreteCountOrderByAggregateInput
    _avg?: LembreteAvgOrderByAggregateInput
    _max?: LembreteMaxOrderByAggregateInput
    _min?: LembreteMinOrderByAggregateInput
    _sum?: LembreteSumOrderByAggregateInput
  }

  export type LembreteScalarWhereWithAggregatesInput = {
    AND?: LembreteScalarWhereWithAggregatesInput | LembreteScalarWhereWithAggregatesInput[]
    OR?: LembreteScalarWhereWithAggregatesInput[]
    NOT?: LembreteScalarWhereWithAggregatesInput | LembreteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lembrete"> | number
    tipo?: StringWithAggregatesFilter<"Lembrete"> | string
    titulo?: StringWithAggregatesFilter<"Lembrete"> | string
    descricao?: StringWithAggregatesFilter<"Lembrete"> | string
    data?: DateTimeWithAggregatesFilter<"Lembrete"> | Date | string
    concluido?: BoolWithAggregatesFilter<"Lembrete"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Lembrete"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Lembrete"> | Date | string
    usuarioId?: IntWithAggregatesFilter<"Lembrete"> | number
  }

  export type EventoWhereInput = {
    AND?: EventoWhereInput | EventoWhereInput[]
    OR?: EventoWhereInput[]
    NOT?: EventoWhereInput | EventoWhereInput[]
    id?: IntFilter<"Evento"> | number
    tipo?: StringFilter<"Evento"> | string
    titulo?: StringFilter<"Evento"> | string
    descricao?: StringFilter<"Evento"> | string
    dataInicio?: DateTimeFilter<"Evento"> | Date | string
    dataFim?: DateTimeFilter<"Evento"> | Date | string
    usuarioId?: IntFilter<"Evento"> | number
    createdAt?: DateTimeFilter<"Evento"> | Date | string
    updatedAt?: DateTimeFilter<"Evento"> | Date | string
    usuario?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EventoOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuario?: UserOrderByWithRelationInput
  }

  export type EventoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventoWhereInput | EventoWhereInput[]
    OR?: EventoWhereInput[]
    NOT?: EventoWhereInput | EventoWhereInput[]
    tipo?: StringFilter<"Evento"> | string
    titulo?: StringFilter<"Evento"> | string
    descricao?: StringFilter<"Evento"> | string
    dataInicio?: DateTimeFilter<"Evento"> | Date | string
    dataFim?: DateTimeFilter<"Evento"> | Date | string
    usuarioId?: IntFilter<"Evento"> | number
    createdAt?: DateTimeFilter<"Evento"> | Date | string
    updatedAt?: DateTimeFilter<"Evento"> | Date | string
    usuario?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type EventoOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EventoCountOrderByAggregateInput
    _avg?: EventoAvgOrderByAggregateInput
    _max?: EventoMaxOrderByAggregateInput
    _min?: EventoMinOrderByAggregateInput
    _sum?: EventoSumOrderByAggregateInput
  }

  export type EventoScalarWhereWithAggregatesInput = {
    AND?: EventoScalarWhereWithAggregatesInput | EventoScalarWhereWithAggregatesInput[]
    OR?: EventoScalarWhereWithAggregatesInput[]
    NOT?: EventoScalarWhereWithAggregatesInput | EventoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Evento"> | number
    tipo?: StringWithAggregatesFilter<"Evento"> | string
    titulo?: StringWithAggregatesFilter<"Evento"> | string
    descricao?: StringWithAggregatesFilter<"Evento"> | string
    dataInicio?: DateTimeWithAggregatesFilter<"Evento"> | Date | string
    dataFim?: DateTimeWithAggregatesFilter<"Evento"> | Date | string
    usuarioId?: IntWithAggregatesFilter<"Evento"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Evento"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Evento"> | Date | string
  }

  export type PublicacaoWhereInput = {
    AND?: PublicacaoWhereInput | PublicacaoWhereInput[]
    OR?: PublicacaoWhereInput[]
    NOT?: PublicacaoWhereInput | PublicacaoWhereInput[]
    id?: IntFilter<"Publicacao"> | number
    tipo?: StringFilter<"Publicacao"> | string
    titulo?: StringFilter<"Publicacao"> | string
    descricao?: StringFilter<"Publicacao"> | string
    conteudo?: StringFilter<"Publicacao"> | string
    usuarioId?: IntFilter<"Publicacao"> | number
    imagem?: StringNullableFilter<"Publicacao"> | string | null
    createdAt?: DateTimeFilter<"Publicacao"> | Date | string
    updatedAt?: DateTimeFilter<"Publicacao"> | Date | string
    usuario?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PublicacaoOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    conteudo?: SortOrder
    usuarioId?: SortOrder
    imagem?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuario?: UserOrderByWithRelationInput
  }

  export type PublicacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PublicacaoWhereInput | PublicacaoWhereInput[]
    OR?: PublicacaoWhereInput[]
    NOT?: PublicacaoWhereInput | PublicacaoWhereInput[]
    tipo?: StringFilter<"Publicacao"> | string
    titulo?: StringFilter<"Publicacao"> | string
    descricao?: StringFilter<"Publicacao"> | string
    conteudo?: StringFilter<"Publicacao"> | string
    usuarioId?: IntFilter<"Publicacao"> | number
    imagem?: StringNullableFilter<"Publicacao"> | string | null
    createdAt?: DateTimeFilter<"Publicacao"> | Date | string
    updatedAt?: DateTimeFilter<"Publicacao"> | Date | string
    usuario?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type PublicacaoOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    conteudo?: SortOrder
    usuarioId?: SortOrder
    imagem?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PublicacaoCountOrderByAggregateInput
    _avg?: PublicacaoAvgOrderByAggregateInput
    _max?: PublicacaoMaxOrderByAggregateInput
    _min?: PublicacaoMinOrderByAggregateInput
    _sum?: PublicacaoSumOrderByAggregateInput
  }

  export type PublicacaoScalarWhereWithAggregatesInput = {
    AND?: PublicacaoScalarWhereWithAggregatesInput | PublicacaoScalarWhereWithAggregatesInput[]
    OR?: PublicacaoScalarWhereWithAggregatesInput[]
    NOT?: PublicacaoScalarWhereWithAggregatesInput | PublicacaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Publicacao"> | number
    tipo?: StringWithAggregatesFilter<"Publicacao"> | string
    titulo?: StringWithAggregatesFilter<"Publicacao"> | string
    descricao?: StringWithAggregatesFilter<"Publicacao"> | string
    conteudo?: StringWithAggregatesFilter<"Publicacao"> | string
    usuarioId?: IntWithAggregatesFilter<"Publicacao"> | number
    imagem?: StringNullableWithAggregatesFilter<"Publicacao"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Publicacao"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Publicacao"> | Date | string
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nome?: StringFilter<"Cliente"> | string
    email?: StringFilter<"Cliente"> | string
    telefone?: StringNullableFilter<"Cliente"> | string | null
    dataNascimento?: DateTimeFilter<"Cliente"> | Date | string
    dataInicio?: DateTimeFilter<"Cliente"> | Date | string
    vencimento?: DateTimeNullableFilter<"Cliente"> | Date | string | null
    status?: StringFilter<"Cliente"> | string
    planoId?: IntFilter<"Cliente"> | number
    plano?: XOR<PlanoRelationFilter, PlanoWhereInput>
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    dataNascimento?: SortOrder
    dataInicio?: SortOrder
    vencimento?: SortOrderInput | SortOrder
    status?: SortOrder
    planoId?: SortOrder
    plano?: PlanoOrderByWithRelationInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    nome?: StringFilter<"Cliente"> | string
    telefone?: StringNullableFilter<"Cliente"> | string | null
    dataNascimento?: DateTimeFilter<"Cliente"> | Date | string
    dataInicio?: DateTimeFilter<"Cliente"> | Date | string
    vencimento?: DateTimeNullableFilter<"Cliente"> | Date | string | null
    status?: StringFilter<"Cliente"> | string
    planoId?: IntFilter<"Cliente"> | number
    plano?: XOR<PlanoRelationFilter, PlanoWhereInput>
  }, "id" | "email">

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    dataNascimento?: SortOrder
    dataInicio?: SortOrder
    vencimento?: SortOrderInput | SortOrder
    status?: SortOrder
    planoId?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cliente"> | number
    nome?: StringWithAggregatesFilter<"Cliente"> | string
    email?: StringWithAggregatesFilter<"Cliente"> | string
    telefone?: StringNullableWithAggregatesFilter<"Cliente"> | string | null
    dataNascimento?: DateTimeWithAggregatesFilter<"Cliente"> | Date | string
    dataInicio?: DateTimeWithAggregatesFilter<"Cliente"> | Date | string
    vencimento?: DateTimeNullableWithAggregatesFilter<"Cliente"> | Date | string | null
    status?: StringWithAggregatesFilter<"Cliente"> | string
    planoId?: IntWithAggregatesFilter<"Cliente"> | number
  }

  export type InstrutorWhereInput = {
    AND?: InstrutorWhereInput | InstrutorWhereInput[]
    OR?: InstrutorWhereInput[]
    NOT?: InstrutorWhereInput | InstrutorWhereInput[]
    id?: IntFilter<"Instrutor"> | number
    nome?: StringFilter<"Instrutor"> | string
    email?: StringFilter<"Instrutor"> | string
    telefone?: StringNullableFilter<"Instrutor"> | string | null
    turno?: StringFilter<"Instrutor"> | string
  }

  export type InstrutorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    turno?: SortOrder
  }

  export type InstrutorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: InstrutorWhereInput | InstrutorWhereInput[]
    OR?: InstrutorWhereInput[]
    NOT?: InstrutorWhereInput | InstrutorWhereInput[]
    nome?: StringFilter<"Instrutor"> | string
    telefone?: StringNullableFilter<"Instrutor"> | string | null
    turno?: StringFilter<"Instrutor"> | string
  }, "id" | "email">

  export type InstrutorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrderInput | SortOrder
    turno?: SortOrder
    _count?: InstrutorCountOrderByAggregateInput
    _avg?: InstrutorAvgOrderByAggregateInput
    _max?: InstrutorMaxOrderByAggregateInput
    _min?: InstrutorMinOrderByAggregateInput
    _sum?: InstrutorSumOrderByAggregateInput
  }

  export type InstrutorScalarWhereWithAggregatesInput = {
    AND?: InstrutorScalarWhereWithAggregatesInput | InstrutorScalarWhereWithAggregatesInput[]
    OR?: InstrutorScalarWhereWithAggregatesInput[]
    NOT?: InstrutorScalarWhereWithAggregatesInput | InstrutorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Instrutor"> | number
    nome?: StringWithAggregatesFilter<"Instrutor"> | string
    email?: StringWithAggregatesFilter<"Instrutor"> | string
    telefone?: StringNullableWithAggregatesFilter<"Instrutor"> | string | null
    turno?: StringWithAggregatesFilter<"Instrutor"> | string
  }

  export type PlanoWhereInput = {
    AND?: PlanoWhereInput | PlanoWhereInput[]
    OR?: PlanoWhereInput[]
    NOT?: PlanoWhereInput | PlanoWhereInput[]
    id?: IntFilter<"Plano"> | number
    nome?: StringFilter<"Plano"> | string
    valor?: FloatFilter<"Plano"> | number
    descricao?: StringNullableFilter<"Plano"> | string | null
    clientes?: ClienteListRelationFilter
  }

  export type PlanoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    descricao?: SortOrderInput | SortOrder
    clientes?: ClienteOrderByRelationAggregateInput
  }

  export type PlanoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: PlanoWhereInput | PlanoWhereInput[]
    OR?: PlanoWhereInput[]
    NOT?: PlanoWhereInput | PlanoWhereInput[]
    valor?: FloatFilter<"Plano"> | number
    descricao?: StringNullableFilter<"Plano"> | string | null
    clientes?: ClienteListRelationFilter
  }, "id" | "nome">

  export type PlanoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    descricao?: SortOrderInput | SortOrder
    _count?: PlanoCountOrderByAggregateInput
    _avg?: PlanoAvgOrderByAggregateInput
    _max?: PlanoMaxOrderByAggregateInput
    _min?: PlanoMinOrderByAggregateInput
    _sum?: PlanoSumOrderByAggregateInput
  }

  export type PlanoScalarWhereWithAggregatesInput = {
    AND?: PlanoScalarWhereWithAggregatesInput | PlanoScalarWhereWithAggregatesInput[]
    OR?: PlanoScalarWhereWithAggregatesInput[]
    NOT?: PlanoScalarWhereWithAggregatesInput | PlanoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Plano"> | number
    nome?: StringWithAggregatesFilter<"Plano"> | string
    valor?: FloatWithAggregatesFilter<"Plano"> | number
    descricao?: StringNullableWithAggregatesFilter<"Plano"> | string | null
  }

  export type UserCreateInput = {
    nome: string
    email: string
    telefone?: string | null
    username?: string | null
    senha: string
    turno: string
    role: string
    lembretes?: LembreteCreateNestedManyWithoutUsuarioInput
    eventos?: EventoCreateNestedManyWithoutUsuarioInput
    publicacoes?: PublicacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    username?: string | null
    senha: string
    turno: string
    role: string
    lembretes?: LembreteUncheckedCreateNestedManyWithoutUsuarioInput
    eventos?: EventoUncheckedCreateNestedManyWithoutUsuarioInput
    publicacoes?: PublicacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lembretes?: LembreteUpdateManyWithoutUsuarioNestedInput
    eventos?: EventoUpdateManyWithoutUsuarioNestedInput
    publicacoes?: PublicacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lembretes?: LembreteUncheckedUpdateManyWithoutUsuarioNestedInput
    eventos?: EventoUncheckedUpdateManyWithoutUsuarioNestedInput
    publicacoes?: PublicacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    username?: string | null
    senha: string
    turno: string
    role: string
  }

  export type UserUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type LembreteCreateInput = {
    tipo: string
    titulo: string
    descricao: string
    data: Date | string
    concluido: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    usuario: UserCreateNestedOneWithoutLembretesInput
  }

  export type LembreteUncheckedCreateInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    data: Date | string
    concluido: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    usuarioId: number
  }

  export type LembreteUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UserUpdateOneRequiredWithoutLembretesNestedInput
  }

  export type LembreteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type LembreteCreateManyInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    data: Date | string
    concluido: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    usuarioId: number
  }

  export type LembreteUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LembreteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
  }

  export type EventoCreateInput = {
    tipo: string
    titulo: string
    descricao: string
    dataInicio: Date | string
    dataFim: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    usuario: UserCreateNestedOneWithoutEventosInput
  }

  export type EventoUncheckedCreateInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    dataInicio: Date | string
    dataFim: Date | string
    usuarioId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventoUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UserUpdateOneRequiredWithoutEventosNestedInput
  }

  export type EventoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventoCreateManyInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    dataInicio: Date | string
    dataFim: Date | string
    usuarioId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventoUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicacaoCreateInput = {
    tipo: string
    titulo: string
    descricao: string
    conteudo: string
    imagem?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usuario: UserCreateNestedOneWithoutPublicacoesInput
  }

  export type PublicacaoUncheckedCreateInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    conteudo: string
    usuarioId: number
    imagem?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PublicacaoUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UserUpdateOneRequiredWithoutPublicacoesNestedInput
  }

  export type PublicacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicacaoCreateManyInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    conteudo: string
    usuarioId: number
    imagem?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PublicacaoUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    usuarioId?: IntFieldUpdateOperationsInput | number
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteCreateInput = {
    nome: string
    email: string
    telefone?: string | null
    dataNascimento: Date | string
    dataInicio?: Date | string
    vencimento?: Date | string | null
    status?: string
    plano: PlanoCreateNestedOneWithoutClientesInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    dataNascimento: Date | string
    dataInicio?: Date | string
    vencimento?: Date | string | null
    status?: string
    planoId: number
  }

  export type ClienteUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    vencimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    plano?: PlanoUpdateOneRequiredWithoutClientesNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    vencimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    planoId?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteCreateManyInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    dataNascimento: Date | string
    dataInicio?: Date | string
    vencimento?: Date | string | null
    status?: string
    planoId: number
  }

  export type ClienteUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    vencimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    vencimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    planoId?: IntFieldUpdateOperationsInput | number
  }

  export type InstrutorCreateInput = {
    nome: string
    email: string
    telefone?: string | null
    turno: string
  }

  export type InstrutorUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    turno: string
  }

  export type InstrutorUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type InstrutorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type InstrutorCreateManyInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    turno: string
  }

  export type InstrutorUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type InstrutorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type PlanoCreateInput = {
    nome: string
    valor: number
    descricao?: string | null
    clientes?: ClienteCreateNestedManyWithoutPlanoInput
  }

  export type PlanoUncheckedCreateInput = {
    id?: number
    nome: string
    valor: number
    descricao?: string | null
    clientes?: ClienteUncheckedCreateNestedManyWithoutPlanoInput
  }

  export type PlanoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    clientes?: ClienteUpdateManyWithoutPlanoNestedInput
  }

  export type PlanoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    clientes?: ClienteUncheckedUpdateManyWithoutPlanoNestedInput
  }

  export type PlanoCreateManyInput = {
    id?: number
    nome: string
    valor: number
    descricao?: string | null
  }

  export type PlanoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type LembreteListRelationFilter = {
    every?: LembreteWhereInput
    some?: LembreteWhereInput
    none?: LembreteWhereInput
  }

  export type EventoListRelationFilter = {
    every?: EventoWhereInput
    some?: EventoWhereInput
    none?: EventoWhereInput
  }

  export type PublicacaoListRelationFilter = {
    every?: PublicacaoWhereInput
    some?: PublicacaoWhereInput
    none?: PublicacaoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LembreteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PublicacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    username?: SortOrder
    senha?: SortOrder
    turno?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    username?: SortOrder
    senha?: SortOrder
    turno?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    username?: SortOrder
    senha?: SortOrder
    turno?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LembreteCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    concluido?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuarioId?: SortOrder
  }

  export type LembreteAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type LembreteMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    concluido?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuarioId?: SortOrder
  }

  export type LembreteMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    data?: SortOrder
    concluido?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuarioId?: SortOrder
  }

  export type LembreteSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EventoCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventoAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type EventoMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventoMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EventoSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type PublicacaoCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    conteudo?: SortOrder
    usuarioId?: SortOrder
    imagem?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublicacaoAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type PublicacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    conteudo?: SortOrder
    usuarioId?: SortOrder
    imagem?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublicacaoMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    descricao?: SortOrder
    conteudo?: SortOrder
    usuarioId?: SortOrder
    imagem?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PublicacaoSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PlanoRelationFilter = {
    is?: PlanoWhereInput
    isNot?: PlanoWhereInput
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    dataInicio?: SortOrder
    vencimento?: SortOrder
    status?: SortOrder
    planoId?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
    planoId?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    dataInicio?: SortOrder
    vencimento?: SortOrder
    status?: SortOrder
    planoId?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    dataNascimento?: SortOrder
    dataInicio?: SortOrder
    vencimento?: SortOrder
    status?: SortOrder
    planoId?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
    planoId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type InstrutorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    turno?: SortOrder
  }

  export type InstrutorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type InstrutorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    turno?: SortOrder
  }

  export type InstrutorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    telefone?: SortOrder
    turno?: SortOrder
  }

  export type InstrutorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ClienteListRelationFilter = {
    every?: ClienteWhereInput
    some?: ClienteWhereInput
    none?: ClienteWhereInput
  }

  export type ClienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlanoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    descricao?: SortOrder
  }

  export type PlanoAvgOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
  }

  export type PlanoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    descricao?: SortOrder
  }

  export type PlanoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    descricao?: SortOrder
  }

  export type PlanoSumOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type LembreteCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<LembreteCreateWithoutUsuarioInput, LembreteUncheckedCreateWithoutUsuarioInput> | LembreteCreateWithoutUsuarioInput[] | LembreteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: LembreteCreateOrConnectWithoutUsuarioInput | LembreteCreateOrConnectWithoutUsuarioInput[]
    createMany?: LembreteCreateManyUsuarioInputEnvelope
    connect?: LembreteWhereUniqueInput | LembreteWhereUniqueInput[]
  }

  export type EventoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<EventoCreateWithoutUsuarioInput, EventoUncheckedCreateWithoutUsuarioInput> | EventoCreateWithoutUsuarioInput[] | EventoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutUsuarioInput | EventoCreateOrConnectWithoutUsuarioInput[]
    createMany?: EventoCreateManyUsuarioInputEnvelope
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
  }

  export type PublicacaoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<PublicacaoCreateWithoutUsuarioInput, PublicacaoUncheckedCreateWithoutUsuarioInput> | PublicacaoCreateWithoutUsuarioInput[] | PublicacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PublicacaoCreateOrConnectWithoutUsuarioInput | PublicacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: PublicacaoCreateManyUsuarioInputEnvelope
    connect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
  }

  export type LembreteUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<LembreteCreateWithoutUsuarioInput, LembreteUncheckedCreateWithoutUsuarioInput> | LembreteCreateWithoutUsuarioInput[] | LembreteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: LembreteCreateOrConnectWithoutUsuarioInput | LembreteCreateOrConnectWithoutUsuarioInput[]
    createMany?: LembreteCreateManyUsuarioInputEnvelope
    connect?: LembreteWhereUniqueInput | LembreteWhereUniqueInput[]
  }

  export type EventoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<EventoCreateWithoutUsuarioInput, EventoUncheckedCreateWithoutUsuarioInput> | EventoCreateWithoutUsuarioInput[] | EventoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutUsuarioInput | EventoCreateOrConnectWithoutUsuarioInput[]
    createMany?: EventoCreateManyUsuarioInputEnvelope
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
  }

  export type PublicacaoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<PublicacaoCreateWithoutUsuarioInput, PublicacaoUncheckedCreateWithoutUsuarioInput> | PublicacaoCreateWithoutUsuarioInput[] | PublicacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PublicacaoCreateOrConnectWithoutUsuarioInput | PublicacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: PublicacaoCreateManyUsuarioInputEnvelope
    connect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type LembreteUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<LembreteCreateWithoutUsuarioInput, LembreteUncheckedCreateWithoutUsuarioInput> | LembreteCreateWithoutUsuarioInput[] | LembreteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: LembreteCreateOrConnectWithoutUsuarioInput | LembreteCreateOrConnectWithoutUsuarioInput[]
    upsert?: LembreteUpsertWithWhereUniqueWithoutUsuarioInput | LembreteUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: LembreteCreateManyUsuarioInputEnvelope
    set?: LembreteWhereUniqueInput | LembreteWhereUniqueInput[]
    disconnect?: LembreteWhereUniqueInput | LembreteWhereUniqueInput[]
    delete?: LembreteWhereUniqueInput | LembreteWhereUniqueInput[]
    connect?: LembreteWhereUniqueInput | LembreteWhereUniqueInput[]
    update?: LembreteUpdateWithWhereUniqueWithoutUsuarioInput | LembreteUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: LembreteUpdateManyWithWhereWithoutUsuarioInput | LembreteUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: LembreteScalarWhereInput | LembreteScalarWhereInput[]
  }

  export type EventoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<EventoCreateWithoutUsuarioInput, EventoUncheckedCreateWithoutUsuarioInput> | EventoCreateWithoutUsuarioInput[] | EventoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutUsuarioInput | EventoCreateOrConnectWithoutUsuarioInput[]
    upsert?: EventoUpsertWithWhereUniqueWithoutUsuarioInput | EventoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: EventoCreateManyUsuarioInputEnvelope
    set?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    disconnect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    delete?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    update?: EventoUpdateWithWhereUniqueWithoutUsuarioInput | EventoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: EventoUpdateManyWithWhereWithoutUsuarioInput | EventoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: EventoScalarWhereInput | EventoScalarWhereInput[]
  }

  export type PublicacaoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<PublicacaoCreateWithoutUsuarioInput, PublicacaoUncheckedCreateWithoutUsuarioInput> | PublicacaoCreateWithoutUsuarioInput[] | PublicacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PublicacaoCreateOrConnectWithoutUsuarioInput | PublicacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: PublicacaoUpsertWithWhereUniqueWithoutUsuarioInput | PublicacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: PublicacaoCreateManyUsuarioInputEnvelope
    set?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    disconnect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    delete?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    connect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    update?: PublicacaoUpdateWithWhereUniqueWithoutUsuarioInput | PublicacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: PublicacaoUpdateManyWithWhereWithoutUsuarioInput | PublicacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: PublicacaoScalarWhereInput | PublicacaoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LembreteUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<LembreteCreateWithoutUsuarioInput, LembreteUncheckedCreateWithoutUsuarioInput> | LembreteCreateWithoutUsuarioInput[] | LembreteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: LembreteCreateOrConnectWithoutUsuarioInput | LembreteCreateOrConnectWithoutUsuarioInput[]
    upsert?: LembreteUpsertWithWhereUniqueWithoutUsuarioInput | LembreteUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: LembreteCreateManyUsuarioInputEnvelope
    set?: LembreteWhereUniqueInput | LembreteWhereUniqueInput[]
    disconnect?: LembreteWhereUniqueInput | LembreteWhereUniqueInput[]
    delete?: LembreteWhereUniqueInput | LembreteWhereUniqueInput[]
    connect?: LembreteWhereUniqueInput | LembreteWhereUniqueInput[]
    update?: LembreteUpdateWithWhereUniqueWithoutUsuarioInput | LembreteUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: LembreteUpdateManyWithWhereWithoutUsuarioInput | LembreteUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: LembreteScalarWhereInput | LembreteScalarWhereInput[]
  }

  export type EventoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<EventoCreateWithoutUsuarioInput, EventoUncheckedCreateWithoutUsuarioInput> | EventoCreateWithoutUsuarioInput[] | EventoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutUsuarioInput | EventoCreateOrConnectWithoutUsuarioInput[]
    upsert?: EventoUpsertWithWhereUniqueWithoutUsuarioInput | EventoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: EventoCreateManyUsuarioInputEnvelope
    set?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    disconnect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    delete?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    update?: EventoUpdateWithWhereUniqueWithoutUsuarioInput | EventoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: EventoUpdateManyWithWhereWithoutUsuarioInput | EventoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: EventoScalarWhereInput | EventoScalarWhereInput[]
  }

  export type PublicacaoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<PublicacaoCreateWithoutUsuarioInput, PublicacaoUncheckedCreateWithoutUsuarioInput> | PublicacaoCreateWithoutUsuarioInput[] | PublicacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: PublicacaoCreateOrConnectWithoutUsuarioInput | PublicacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: PublicacaoUpsertWithWhereUniqueWithoutUsuarioInput | PublicacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: PublicacaoCreateManyUsuarioInputEnvelope
    set?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    disconnect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    delete?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    connect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    update?: PublicacaoUpdateWithWhereUniqueWithoutUsuarioInput | PublicacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: PublicacaoUpdateManyWithWhereWithoutUsuarioInput | PublicacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: PublicacaoScalarWhereInput | PublicacaoScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLembretesInput = {
    create?: XOR<UserCreateWithoutLembretesInput, UserUncheckedCreateWithoutLembretesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLembretesInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutLembretesNestedInput = {
    create?: XOR<UserCreateWithoutLembretesInput, UserUncheckedCreateWithoutLembretesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLembretesInput
    upsert?: UserUpsertWithoutLembretesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLembretesInput, UserUpdateWithoutLembretesInput>, UserUncheckedUpdateWithoutLembretesInput>
  }

  export type UserCreateNestedOneWithoutEventosInput = {
    create?: XOR<UserCreateWithoutEventosInput, UserUncheckedCreateWithoutEventosInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventosInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEventosNestedInput = {
    create?: XOR<UserCreateWithoutEventosInput, UserUncheckedCreateWithoutEventosInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventosInput
    upsert?: UserUpsertWithoutEventosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventosInput, UserUpdateWithoutEventosInput>, UserUncheckedUpdateWithoutEventosInput>
  }

  export type UserCreateNestedOneWithoutPublicacoesInput = {
    create?: XOR<UserCreateWithoutPublicacoesInput, UserUncheckedCreateWithoutPublicacoesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPublicacoesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPublicacoesNestedInput = {
    create?: XOR<UserCreateWithoutPublicacoesInput, UserUncheckedCreateWithoutPublicacoesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPublicacoesInput
    upsert?: UserUpsertWithoutPublicacoesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPublicacoesInput, UserUpdateWithoutPublicacoesInput>, UserUncheckedUpdateWithoutPublicacoesInput>
  }

  export type PlanoCreateNestedOneWithoutClientesInput = {
    create?: XOR<PlanoCreateWithoutClientesInput, PlanoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: PlanoCreateOrConnectWithoutClientesInput
    connect?: PlanoWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PlanoUpdateOneRequiredWithoutClientesNestedInput = {
    create?: XOR<PlanoCreateWithoutClientesInput, PlanoUncheckedCreateWithoutClientesInput>
    connectOrCreate?: PlanoCreateOrConnectWithoutClientesInput
    upsert?: PlanoUpsertWithoutClientesInput
    connect?: PlanoWhereUniqueInput
    update?: XOR<XOR<PlanoUpdateToOneWithWhereWithoutClientesInput, PlanoUpdateWithoutClientesInput>, PlanoUncheckedUpdateWithoutClientesInput>
  }

  export type ClienteCreateNestedManyWithoutPlanoInput = {
    create?: XOR<ClienteCreateWithoutPlanoInput, ClienteUncheckedCreateWithoutPlanoInput> | ClienteCreateWithoutPlanoInput[] | ClienteUncheckedCreateWithoutPlanoInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutPlanoInput | ClienteCreateOrConnectWithoutPlanoInput[]
    createMany?: ClienteCreateManyPlanoInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type ClienteUncheckedCreateNestedManyWithoutPlanoInput = {
    create?: XOR<ClienteCreateWithoutPlanoInput, ClienteUncheckedCreateWithoutPlanoInput> | ClienteCreateWithoutPlanoInput[] | ClienteUncheckedCreateWithoutPlanoInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutPlanoInput | ClienteCreateOrConnectWithoutPlanoInput[]
    createMany?: ClienteCreateManyPlanoInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClienteUpdateManyWithoutPlanoNestedInput = {
    create?: XOR<ClienteCreateWithoutPlanoInput, ClienteUncheckedCreateWithoutPlanoInput> | ClienteCreateWithoutPlanoInput[] | ClienteUncheckedCreateWithoutPlanoInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutPlanoInput | ClienteCreateOrConnectWithoutPlanoInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutPlanoInput | ClienteUpsertWithWhereUniqueWithoutPlanoInput[]
    createMany?: ClienteCreateManyPlanoInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutPlanoInput | ClienteUpdateWithWhereUniqueWithoutPlanoInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutPlanoInput | ClienteUpdateManyWithWhereWithoutPlanoInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type ClienteUncheckedUpdateManyWithoutPlanoNestedInput = {
    create?: XOR<ClienteCreateWithoutPlanoInput, ClienteUncheckedCreateWithoutPlanoInput> | ClienteCreateWithoutPlanoInput[] | ClienteUncheckedCreateWithoutPlanoInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutPlanoInput | ClienteCreateOrConnectWithoutPlanoInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutPlanoInput | ClienteUpsertWithWhereUniqueWithoutPlanoInput[]
    createMany?: ClienteCreateManyPlanoInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutPlanoInput | ClienteUpdateWithWhereUniqueWithoutPlanoInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutPlanoInput | ClienteUpdateManyWithWhereWithoutPlanoInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type LembreteCreateWithoutUsuarioInput = {
    tipo: string
    titulo: string
    descricao: string
    data: Date | string
    concluido: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LembreteUncheckedCreateWithoutUsuarioInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    data: Date | string
    concluido: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LembreteCreateOrConnectWithoutUsuarioInput = {
    where: LembreteWhereUniqueInput
    create: XOR<LembreteCreateWithoutUsuarioInput, LembreteUncheckedCreateWithoutUsuarioInput>
  }

  export type LembreteCreateManyUsuarioInputEnvelope = {
    data: LembreteCreateManyUsuarioInput | LembreteCreateManyUsuarioInput[]
  }

  export type EventoCreateWithoutUsuarioInput = {
    tipo: string
    titulo: string
    descricao: string
    dataInicio: Date | string
    dataFim: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventoUncheckedCreateWithoutUsuarioInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    dataInicio: Date | string
    dataFim: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventoCreateOrConnectWithoutUsuarioInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutUsuarioInput, EventoUncheckedCreateWithoutUsuarioInput>
  }

  export type EventoCreateManyUsuarioInputEnvelope = {
    data: EventoCreateManyUsuarioInput | EventoCreateManyUsuarioInput[]
  }

  export type PublicacaoCreateWithoutUsuarioInput = {
    tipo: string
    titulo: string
    descricao: string
    conteudo: string
    imagem?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PublicacaoUncheckedCreateWithoutUsuarioInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    conteudo: string
    imagem?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PublicacaoCreateOrConnectWithoutUsuarioInput = {
    where: PublicacaoWhereUniqueInput
    create: XOR<PublicacaoCreateWithoutUsuarioInput, PublicacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type PublicacaoCreateManyUsuarioInputEnvelope = {
    data: PublicacaoCreateManyUsuarioInput | PublicacaoCreateManyUsuarioInput[]
  }

  export type LembreteUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: LembreteWhereUniqueInput
    update: XOR<LembreteUpdateWithoutUsuarioInput, LembreteUncheckedUpdateWithoutUsuarioInput>
    create: XOR<LembreteCreateWithoutUsuarioInput, LembreteUncheckedCreateWithoutUsuarioInput>
  }

  export type LembreteUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: LembreteWhereUniqueInput
    data: XOR<LembreteUpdateWithoutUsuarioInput, LembreteUncheckedUpdateWithoutUsuarioInput>
  }

  export type LembreteUpdateManyWithWhereWithoutUsuarioInput = {
    where: LembreteScalarWhereInput
    data: XOR<LembreteUpdateManyMutationInput, LembreteUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type LembreteScalarWhereInput = {
    AND?: LembreteScalarWhereInput | LembreteScalarWhereInput[]
    OR?: LembreteScalarWhereInput[]
    NOT?: LembreteScalarWhereInput | LembreteScalarWhereInput[]
    id?: IntFilter<"Lembrete"> | number
    tipo?: StringFilter<"Lembrete"> | string
    titulo?: StringFilter<"Lembrete"> | string
    descricao?: StringFilter<"Lembrete"> | string
    data?: DateTimeFilter<"Lembrete"> | Date | string
    concluido?: BoolFilter<"Lembrete"> | boolean
    createdAt?: DateTimeFilter<"Lembrete"> | Date | string
    updatedAt?: DateTimeFilter<"Lembrete"> | Date | string
    usuarioId?: IntFilter<"Lembrete"> | number
  }

  export type EventoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: EventoWhereUniqueInput
    update: XOR<EventoUpdateWithoutUsuarioInput, EventoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<EventoCreateWithoutUsuarioInput, EventoUncheckedCreateWithoutUsuarioInput>
  }

  export type EventoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: EventoWhereUniqueInput
    data: XOR<EventoUpdateWithoutUsuarioInput, EventoUncheckedUpdateWithoutUsuarioInput>
  }

  export type EventoUpdateManyWithWhereWithoutUsuarioInput = {
    where: EventoScalarWhereInput
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type EventoScalarWhereInput = {
    AND?: EventoScalarWhereInput | EventoScalarWhereInput[]
    OR?: EventoScalarWhereInput[]
    NOT?: EventoScalarWhereInput | EventoScalarWhereInput[]
    id?: IntFilter<"Evento"> | number
    tipo?: StringFilter<"Evento"> | string
    titulo?: StringFilter<"Evento"> | string
    descricao?: StringFilter<"Evento"> | string
    dataInicio?: DateTimeFilter<"Evento"> | Date | string
    dataFim?: DateTimeFilter<"Evento"> | Date | string
    usuarioId?: IntFilter<"Evento"> | number
    createdAt?: DateTimeFilter<"Evento"> | Date | string
    updatedAt?: DateTimeFilter<"Evento"> | Date | string
  }

  export type PublicacaoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: PublicacaoWhereUniqueInput
    update: XOR<PublicacaoUpdateWithoutUsuarioInput, PublicacaoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<PublicacaoCreateWithoutUsuarioInput, PublicacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type PublicacaoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: PublicacaoWhereUniqueInput
    data: XOR<PublicacaoUpdateWithoutUsuarioInput, PublicacaoUncheckedUpdateWithoutUsuarioInput>
  }

  export type PublicacaoUpdateManyWithWhereWithoutUsuarioInput = {
    where: PublicacaoScalarWhereInput
    data: XOR<PublicacaoUpdateManyMutationInput, PublicacaoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type PublicacaoScalarWhereInput = {
    AND?: PublicacaoScalarWhereInput | PublicacaoScalarWhereInput[]
    OR?: PublicacaoScalarWhereInput[]
    NOT?: PublicacaoScalarWhereInput | PublicacaoScalarWhereInput[]
    id?: IntFilter<"Publicacao"> | number
    tipo?: StringFilter<"Publicacao"> | string
    titulo?: StringFilter<"Publicacao"> | string
    descricao?: StringFilter<"Publicacao"> | string
    conteudo?: StringFilter<"Publicacao"> | string
    usuarioId?: IntFilter<"Publicacao"> | number
    imagem?: StringNullableFilter<"Publicacao"> | string | null
    createdAt?: DateTimeFilter<"Publicacao"> | Date | string
    updatedAt?: DateTimeFilter<"Publicacao"> | Date | string
  }

  export type UserCreateWithoutLembretesInput = {
    nome: string
    email: string
    telefone?: string | null
    username?: string | null
    senha: string
    turno: string
    role: string
    eventos?: EventoCreateNestedManyWithoutUsuarioInput
    publicacoes?: PublicacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutLembretesInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    username?: string | null
    senha: string
    turno: string
    role: string
    eventos?: EventoUncheckedCreateNestedManyWithoutUsuarioInput
    publicacoes?: PublicacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutLembretesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLembretesInput, UserUncheckedCreateWithoutLembretesInput>
  }

  export type UserUpsertWithoutLembretesInput = {
    update: XOR<UserUpdateWithoutLembretesInput, UserUncheckedUpdateWithoutLembretesInput>
    create: XOR<UserCreateWithoutLembretesInput, UserUncheckedCreateWithoutLembretesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLembretesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLembretesInput, UserUncheckedUpdateWithoutLembretesInput>
  }

  export type UserUpdateWithoutLembretesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    eventos?: EventoUpdateManyWithoutUsuarioNestedInput
    publicacoes?: PublicacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutLembretesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    eventos?: EventoUncheckedUpdateManyWithoutUsuarioNestedInput
    publicacoes?: PublicacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UserCreateWithoutEventosInput = {
    nome: string
    email: string
    telefone?: string | null
    username?: string | null
    senha: string
    turno: string
    role: string
    lembretes?: LembreteCreateNestedManyWithoutUsuarioInput
    publicacoes?: PublicacaoCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutEventosInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    username?: string | null
    senha: string
    turno: string
    role: string
    lembretes?: LembreteUncheckedCreateNestedManyWithoutUsuarioInput
    publicacoes?: PublicacaoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutEventosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventosInput, UserUncheckedCreateWithoutEventosInput>
  }

  export type UserUpsertWithoutEventosInput = {
    update: XOR<UserUpdateWithoutEventosInput, UserUncheckedUpdateWithoutEventosInput>
    create: XOR<UserCreateWithoutEventosInput, UserUncheckedCreateWithoutEventosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventosInput, UserUncheckedUpdateWithoutEventosInput>
  }

  export type UserUpdateWithoutEventosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lembretes?: LembreteUpdateManyWithoutUsuarioNestedInput
    publicacoes?: PublicacaoUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutEventosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lembretes?: LembreteUncheckedUpdateManyWithoutUsuarioNestedInput
    publicacoes?: PublicacaoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UserCreateWithoutPublicacoesInput = {
    nome: string
    email: string
    telefone?: string | null
    username?: string | null
    senha: string
    turno: string
    role: string
    lembretes?: LembreteCreateNestedManyWithoutUsuarioInput
    eventos?: EventoCreateNestedManyWithoutUsuarioInput
  }

  export type UserUncheckedCreateWithoutPublicacoesInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    username?: string | null
    senha: string
    turno: string
    role: string
    lembretes?: LembreteUncheckedCreateNestedManyWithoutUsuarioInput
    eventos?: EventoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UserCreateOrConnectWithoutPublicacoesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPublicacoesInput, UserUncheckedCreateWithoutPublicacoesInput>
  }

  export type UserUpsertWithoutPublicacoesInput = {
    update: XOR<UserUpdateWithoutPublicacoesInput, UserUncheckedUpdateWithoutPublicacoesInput>
    create: XOR<UserCreateWithoutPublicacoesInput, UserUncheckedCreateWithoutPublicacoesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPublicacoesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPublicacoesInput, UserUncheckedUpdateWithoutPublicacoesInput>
  }

  export type UserUpdateWithoutPublicacoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lembretes?: LembreteUpdateManyWithoutUsuarioNestedInput
    eventos?: EventoUpdateManyWithoutUsuarioNestedInput
  }

  export type UserUncheckedUpdateWithoutPublicacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    senha?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    lembretes?: LembreteUncheckedUpdateManyWithoutUsuarioNestedInput
    eventos?: EventoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type PlanoCreateWithoutClientesInput = {
    nome: string
    valor: number
    descricao?: string | null
  }

  export type PlanoUncheckedCreateWithoutClientesInput = {
    id?: number
    nome: string
    valor: number
    descricao?: string | null
  }

  export type PlanoCreateOrConnectWithoutClientesInput = {
    where: PlanoWhereUniqueInput
    create: XOR<PlanoCreateWithoutClientesInput, PlanoUncheckedCreateWithoutClientesInput>
  }

  export type PlanoUpsertWithoutClientesInput = {
    update: XOR<PlanoUpdateWithoutClientesInput, PlanoUncheckedUpdateWithoutClientesInput>
    create: XOR<PlanoCreateWithoutClientesInput, PlanoUncheckedCreateWithoutClientesInput>
    where?: PlanoWhereInput
  }

  export type PlanoUpdateToOneWithWhereWithoutClientesInput = {
    where?: PlanoWhereInput
    data: XOR<PlanoUpdateWithoutClientesInput, PlanoUncheckedUpdateWithoutClientesInput>
  }

  export type PlanoUpdateWithoutClientesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanoUncheckedUpdateWithoutClientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClienteCreateWithoutPlanoInput = {
    nome: string
    email: string
    telefone?: string | null
    dataNascimento: Date | string
    dataInicio?: Date | string
    vencimento?: Date | string | null
    status?: string
  }

  export type ClienteUncheckedCreateWithoutPlanoInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    dataNascimento: Date | string
    dataInicio?: Date | string
    vencimento?: Date | string | null
    status?: string
  }

  export type ClienteCreateOrConnectWithoutPlanoInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutPlanoInput, ClienteUncheckedCreateWithoutPlanoInput>
  }

  export type ClienteCreateManyPlanoInputEnvelope = {
    data: ClienteCreateManyPlanoInput | ClienteCreateManyPlanoInput[]
  }

  export type ClienteUpsertWithWhereUniqueWithoutPlanoInput = {
    where: ClienteWhereUniqueInput
    update: XOR<ClienteUpdateWithoutPlanoInput, ClienteUncheckedUpdateWithoutPlanoInput>
    create: XOR<ClienteCreateWithoutPlanoInput, ClienteUncheckedCreateWithoutPlanoInput>
  }

  export type ClienteUpdateWithWhereUniqueWithoutPlanoInput = {
    where: ClienteWhereUniqueInput
    data: XOR<ClienteUpdateWithoutPlanoInput, ClienteUncheckedUpdateWithoutPlanoInput>
  }

  export type ClienteUpdateManyWithWhereWithoutPlanoInput = {
    where: ClienteScalarWhereInput
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyWithoutPlanoInput>
  }

  export type ClienteScalarWhereInput = {
    AND?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    OR?: ClienteScalarWhereInput[]
    NOT?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nome?: StringFilter<"Cliente"> | string
    email?: StringFilter<"Cliente"> | string
    telefone?: StringNullableFilter<"Cliente"> | string | null
    dataNascimento?: DateTimeFilter<"Cliente"> | Date | string
    dataInicio?: DateTimeFilter<"Cliente"> | Date | string
    vencimento?: DateTimeNullableFilter<"Cliente"> | Date | string | null
    status?: StringFilter<"Cliente"> | string
    planoId?: IntFilter<"Cliente"> | number
  }

  export type LembreteCreateManyUsuarioInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    data: Date | string
    concluido: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EventoCreateManyUsuarioInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    dataInicio: Date | string
    dataFim: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PublicacaoCreateManyUsuarioInput = {
    id?: number
    tipo: string
    titulo: string
    descricao: string
    conteudo: string
    imagem?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LembreteUpdateWithoutUsuarioInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LembreteUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LembreteUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    concluido?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventoUpdateWithoutUsuarioInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventoUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicacaoUpdateWithoutUsuarioInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicacaoUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicacaoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    conteudo?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClienteCreateManyPlanoInput = {
    id?: number
    nome: string
    email: string
    telefone?: string | null
    dataNascimento: Date | string
    dataInicio?: Date | string
    vencimento?: Date | string | null
    status?: string
  }

  export type ClienteUpdateWithoutPlanoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    vencimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateWithoutPlanoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    vencimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateManyWithoutPlanoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefone?: NullableStringFieldUpdateOperationsInput | string | null
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    vencimento?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlanoCountOutputTypeDefaultArgs instead
     */
    export type PlanoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LembreteDefaultArgs instead
     */
    export type LembreteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LembreteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventoDefaultArgs instead
     */
    export type EventoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PublicacaoDefaultArgs instead
     */
    export type PublicacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PublicacaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClienteDefaultArgs instead
     */
    export type ClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClienteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstrutorDefaultArgs instead
     */
    export type InstrutorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InstrutorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlanoDefaultArgs instead
     */
    export type PlanoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}